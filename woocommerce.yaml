swagger: '2.0'
info:
  version: '1.0'
  title: WooCommerce
  description: WooCommerce is an open-source e-commerce plugin for WordPress. It is
    designed for small to large-sized online merchants using WordPress.
  contact: {name: Troy Taylor, url: 'https://www.hitachisolutions.com', email: ttaylor@hitachisolutions.com}
host: www.your-host.com
basePath: /wp-json/wc/v3
schemes: [https]
consumes: [application/json]
produces: [application/json]
paths:
  /coupons:
    get:
      description: List all the coupons that have been created.
      summary: List all coupons
      operationId: Coupons_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      - {name: page, in: query, x-ms-summary: Page, required: false, type: integer,
        format: int32, description: Current page of the collection.}
      - {name: per_page, in: query, x-ms-summary: Per Page, required: false, type: integer,
        format: int32, description: Maximum number of items to be returned in result
          set.}
      - {name: search, in: query, x-ms-summary: Search, required: false, type: string,
        description: Limit results to those matching a string.}
      - {name: after, in: query, x-ms-summary: After, required: false, type: string,
        description: Limit response to resources published after a given ISO8601 compliant
          date.}
      - {name: before, in: query, x-ms-summary: Before, required: false, type: string,
        description: Limit response to resources published before a given ISO8601
          compliant date.}
      - {name: modified_after, in: query, x-ms-summary: Modified After, required: false,
        type: string, description: Limit response to resources modified after a given
          ISO8601 compliant date.}
      - {name: modified_before, in: query, x-ms-summary: Modified Before, required: false,
        type: string, description: Limit response to resources modified before a given
          ISO8601 compliant date.}
      - {name: dates_are_gmt, in: query, x-ms-summary: Dates Are GMT, required: false,
        type: boolean, description: Whether to consider GMT post dates when limiting
          response by published or modified date.}
      - name: exclude
        in: query
        x-ms-summary: Exclude
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Ensure result set excludes specific IDs.
      - name: include
        in: query
        x-ms-summary: Include
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Limit result set to specific ids.
      - {name: offset, in: query, x-ms-summary: Offset, required: false, type: integer,
        format: int32, description: Offset the result set by a specific number of
          items.}
      - name: order
        in: query
        x-ms-summary: Order
        required: false
        enum: [asc, desc]
        type: string
        description: Order sort attribute ascending or descending.
      - name: orderby
        in: query
        x-ms-summary: Order By
        required: false
        enum: [date, id, include, title, slug, modified]
        type: string
        description: Sort collection by object attribute.
      - {name: code, in: query, x-ms-summary: Code, required: false, type: string,
        description: Limit result set to resources with a specific code.}
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/shop_coupon'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new coupon.
      summary: Create a coupon
      operationId: Coupons_POST
      deprecated: false
      parameters:
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/shop_coupon1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shop_coupon'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /coupons/{id}:
    get:
      description: This action lets you retrieve and view a specific coupon by ID.
      summary: Retrieve a coupon
      operationId: CouponsById_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shop_coupon'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    delete:
      description: This action helps you delete a coupon.
      summary: Delete a coupon
      operationId: CouponsById_DELETE
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - {name: force, in: query, x-ms-summary: Force, required: false, type: boolean,
        description: Whether to bypass trash and force deletion.}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shop_coupon'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you create a coupon with a given ID.
      summary: Create a coupon with an ID
      operationId: CouponsById_POST
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/shop_coupon1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shop_coupon'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    put:
      description: This action lets you make changes to a coupon.
      summary: Update a coupon
      operationId: CouponsById_PUT
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/shop_coupon1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shop_coupon'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    patch:
      description: This action lets you make changes to a coupon.
      summary: Patch a coupon
      operationId: CouponsById_PATCH
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/shop_coupon1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shop_coupon'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /customers/{customer_id}/downloads:
    get:
      description: This action lets you retrieve customer downloads.
      summary: Retrieve customer downloads
      operationId: CustomersDownloadsByCustomerId_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: customer_id, in: path, x-ms-summary: Customer ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: Unique identifier
          for the resource.}
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/customer_download'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /customers:
    get:
      description: This action helps you to view all the customers.
      summary: List all customers
      operationId: Customers_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      - {name: page, in: query, x-ms-summary: Page, required: false, type: integer,
        format: int32, description: Current page of the collection.}
      - {name: per_page, in: query, x-ms-summary: Per Page, required: false, type: integer,
        format: int32, description: Maximum number of items to be returned in result
          set.}
      - {name: search, in: query, x-ms-summary: Search, required: false, type: string,
        description: Limit results to those matching a string.}
      - name: exclude
        in: query
        x-ms-summary: Exclude
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Ensure result set excludes specific IDs.
      - name: include
        in: query
        x-ms-summary: Include
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Limit result set to specific IDs.
      - {name: offset, in: query, x-ms-summary: Offset, required: false, type: integer,
        format: int32, description: Offset the result set by a specific number of
          items.}
      - name: order
        in: query
        x-ms-summary: Order
        required: false
        enum: [asc, desc]
        type: string
        description: Order sort attribute ascending or descending.
      - name: orderby
        in: query
        x-ms-summary: Order By
        required: false
        enum: [id, include, name, registered_date]
        type: string
        description: Sort collection by object attribute.
      - {name: email, in: query, x-ms-summary: Email, required: false, type: string,
        description: Limit result set to resources with a specific email.}
      - name: role
        in: query
        x-ms-summary: Role
        required: false
        enum: [all, administrator, editor, author, contributor, subscriber, customer,
          shop_manager]
        type: string
        description: Limit result set to resources with a specific role.
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/customer'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new customer.
      summary: Create a customer
      operationId: Customers_POST
      deprecated: false
      parameters:
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/customer1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/customer'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /customers/{id}:
    get:
      description: This action lets you retrieve and view a specific customer by ID.
      summary: Retrieve a customer
      operationId: CustomersById_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/customer'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    delete:
      description: This action helps you delete a customer.
      summary: Delete a customer
      operationId: CustomersById_DELETE
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - {name: force, in: query, x-ms-summary: Force, required: false, type: boolean,
        description: 'Required to be true, as resource does not support trashing.'}
      - {name: reassign, in: query, x-ms-summary: Reassign, required: false, type: integer,
        format: int32, description: ID to reassign posts to.}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/customer'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you delete a customer.
      summary: Delete a customer
      operationId: CustomersById_POST
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/customer2'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/customer'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    put:
      description: This action lets you make changes to a customer.
      summary: Update all fields of a customer
      operationId: CustomersById_PUT
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/customer2'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/customer'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    patch:
      description: This action lets you make changes to a customer.
      summary: Update a customer
      operationId: CustomersById_PATCH
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/customer2'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/customer'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /orders/{order_id}/notes:
    get:
      description: This action helps you to view all the notes from an order.
      summary: List all order notes
      operationId: OrdersNotesByOrderId_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: order_id, in: path, x-ms-summary: Order ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: The order ID.}
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      - name: type
        in: query
        x-ms-summary: Type
        required: false
        enum: [any, customer, internal]
        type: string
        description: Limit result to customers or internal notes.
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/order_note'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new note for an order.
      summary: Create an order note
      operationId: OrdersNotesByOrderId_POST
      deprecated: false
      parameters:
      - {name: order_id, in: path, x-ms-summary: Order ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: The order ID.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/order_note1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/order_note'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /orders/{order_id}/notes/{id}:
    get:
      description: This action lets you retrieve and view a specific note from an
        order.
      summary: Retrieve an order note
      operationId: OrdersNotesByOrderIdAndId_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - {name: order_id, in: path, x-ms-summary: Order ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: The order ID.}
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/order_note'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    delete:
      description: This action helps you delete an order note.
      summary: Delete an order note
      operationId: OrdersNotesByOrderIdAndId_DELETE
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - {name: order_id, in: path, x-ms-summary: Order ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: The order ID.}
      - {name: force, in: query, x-ms-summary: Force, required: false, type: boolean,
        description: 'Required to be true, as resource does not support trashing.'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/order_note'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /orders/{order_id}/refunds:
    get:
      description: This action helps you to view all the refunds from an order.
      summary: List all refunds
      operationId: OrdersRefundsByOrderId_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: order_id, in: path, x-ms-summary: Order ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: The order ID.}
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      - {name: page, in: query, x-ms-summary: Page, required: false, type: integer,
        format: int32, description: Current page of the collection.}
      - {name: per_page, in: query, x-ms-summary: Per Page, required: false, type: integer,
        format: int32, description: Maximum number of items to be returned in result
          set.}
      - {name: search, in: query, x-ms-summary: Search, required: false, type: string,
        description: Limit results to those matching a string.}
      - {name: after, in: query, x-ms-summary: After, required: false, type: string,
        description: Limit response to resources published after a given ISO8601 compliant
          date.}
      - {name: before, in: query, x-ms-summary: Before, required: false, type: string,
        description: Limit response to resources published before a given ISO8601
          compliant date.}
      - {name: modified_after, in: query, x-ms-summary: Modified After, required: false,
        type: string, description: Limit response to resources modified after a given
          ISO8601 compliant date.}
      - {name: modified_before, in: query, x-ms-summary: Modified Before, required: false,
        type: string, description: Limit response to resources modified before a given
          ISO8601 compliant date.}
      - {name: dates_are_gmt, in: query, x-ms-summary: Dates Are GMT, required: false,
        type: boolean, description: Whether to consider GMT post dates when limiting
          response by published or modified date.}
      - name: exclude
        in: query
        x-ms-summary: Exclude
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Ensure result set excludes specific IDs.
      - name: include
        in: query
        x-ms-summary: Include
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Limit result set to specific ids.
      - {name: offset, in: query, x-ms-summary: Offset, required: false, type: integer,
        format: int32, description: Offset the result set by a specific number of
          items.}
      - name: order
        in: query
        x-ms-summary: Order
        required: false
        enum: [asc, desc]
        type: string
        description: Order sort attribute ascending or descending.
      - name: orderby
        in: query
        x-ms-summary: Order By
        required: false
        enum: [date, id, include, title, slug, modified]
        type: string
        description: Sort collection by object attribute.
      - name: parent
        in: query
        x-ms-summary: Parent
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Limit result set to those of particular parent IDs.
      - name: parent_exclude
        in: query
        x-ms-summary: Parent Exclude
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Limit result set to all items except those of a particular parent
          ID.
      - {name: dp, in: query, x-ms-summary: Decimal Points, required: false, type: integer,
        format: int32, description: Number of decimal points to use in each resource.}
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/shop_order_refund'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new refund for an order.
      summary: Create a refund
      operationId: OrdersRefundsByOrderId_POST
      deprecated: false
      parameters:
      - {name: order_id, in: path, x-ms-summary: Order ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: The order ID.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/shop_order_refund1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shop_order_refund'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /orders/{order_id}/refunds/{id}:
    get:
      description: This action lets you retrieve and view a specific refund from an
        order.
      summary: Retrieve a refund
      operationId: OrdersRefundsByOrderIdAndId_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: order_id, in: path, x-ms-summary: Order ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: The order ID.}
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shop_order_refund'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    delete:
      description: This action helps you delete an order refund.
      summary: Delete a refund
      operationId: OrdersRefundsByOrderIdAndId_DELETE
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: order_id, in: path, x-ms-summary: Order ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: The order ID.}
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - {name: force, in: query, x-ms-summary: Force, required: false, type: boolean,
        description: 'Required to be true, as resource does not support trashing.'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shop_order_refund'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /orders:
    get:
      description: This action helps you to view all the orders.
      summary: List all orders
      operationId: Orders_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      - {name: page, in: query, x-ms-summary: Page, required: false, type: integer,
        format: int32, description: Current page of the collection.}
      - {name: per_page, in: query, x-ms-summary: Per Page, required: false, type: integer,
        format: int32, description: Maximum number of items to be returned in result
          set.}
      - {name: search, in: query, x-ms-summary: Search, required: false, type: string,
        description: Limit results to those matching a string.}
      - {name: after, in: query, x-ms-summary: After, required: false, type: string,
        description: Limit response to resources published after a given ISO8601 compliant
          date.}
      - {name: before, in: query, x-ms-summary: Before, required: false, type: string,
        description: Limit response to resources published before a given ISO8601
          compliant date.}
      - {name: modified_after, in: query, x-ms-summary: Modified After, required: false,
        type: string, description: Limit response to resources modified after a given
          ISO8601 compliant date.}
      - {name: modified_before, in: query, x-ms-summary: Modified Before, required: false,
        type: string, description: Limit response to resources modified before a given
          ISO8601 compliant date.}
      - {name: dates_are_gmt, in: query, x-ms-summary: Dates Are GMT, required: false,
        type: boolean, description: Whether to consider GMT post dates when limiting
          response by published or modified date.}
      - name: exclude
        in: query
        x-ms-summary: Exclude
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Ensure result set excludes specific IDs.
      - name: include
        in: query
        x-ms-summary: Include
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Limit result set to specific ids.
      - {name: offset, in: query, x-ms-summary: Offset, required: false, type: integer,
        format: int32, description: Offset the result set by a specific number of
          items.}
      - name: order
        in: query
        x-ms-summary: Order
        required: false
        enum: [asc, desc]
        type: string
        description: Order sort attribute ascending or descending.
      - name: orderby
        in: query
        x-ms-summary: Order By
        required: false
        enum: [date, id, include, title, slug, modified]
        type: string
        description: Sort collection by object attribute.
      - name: parent
        in: query
        x-ms-summary: Parent
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Limit result set to those of particular parent IDs.
      - name: parent_exclude
        in: query
        x-ms-summary: Parent Exclude
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Limit result set to all items except those of a particular parent
          ID.
      - name: status
        in: query
        x-ms-summary: Status
        required: false
        type: array
        items:
          type: string
          enum: [any, trash, pending, processing, on-hold, completed, cancelled, refunded,
            failed]
        description: Limit result set to orders which have specific statuses.
      - {name: customer, in: query, x-ms-summary: Customer, required: false, type: integer,
        format: int32, description: Limit result set to orders assigned a specific
          customer.}
      - {name: product, in: query, x-ms-summary: Product, required: false, type: integer,
        format: int32, description: Limit result set to orders assigned a specific
          product.}
      - {name: dp, in: query, x-ms-summary: Decimal Points, required: false, type: integer,
        format: int32, description: Number of decimal points to use in each resource.}
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/shop_order'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new order.
      summary: Create an order
      operationId: Orders_POST
      deprecated: false
      parameters:
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/shop_order1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shop_order'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /orders/{id}:
    get:
      description: This action lets you retrieve and view a specific order.
      summary: Retrieve an order
      operationId: OrdersById_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shop_order'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    delete:
      description: This action helps you delete an order.
      summary: Delete an order
      operationId: OrdersById_DELETE
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - {name: force, in: query, x-ms-summary: Force, required: false, type: boolean,
        description: Whether to bypass trash and force deletion.}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shop_order'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new order by ID.
      summary: Create an order by ID
      operationId: OrdersById_POST
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/shop_order1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shop_order'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    put:
      description: This action lets you make changes to all of an order.
      summary: Update an Order
      operationId: OrdersById_PUT
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/shop_order1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shop_order'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    patch:
      description: This action lets you make changes to parts of an order.
      summary: Update parts of an Order
      operationId: OrdersById_PATCH
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/shop_order1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shop_order'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /products/attributes/{attribute_id}/terms:
    get:
      description: This action lets you retrieve all terms from a product attribute.
      summary: List all attribute terms
      operationId: ProductsAttributesTermsByAttributeId_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: attribute_id, in: path, x-ms-summary: Attribute ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: Unique identifier
          for the attribute of the terms.}
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      - {name: page, in: query, x-ms-summary: Page, required: false, type: integer,
        format: int32, description: Current page of the collection.}
      - {name: per_page, in: query, x-ms-summary: Per Page, required: false, type: integer,
        format: int32, description: Maximum number of items to be returned in result
          set.}
      - {name: search, in: query, x-ms-summary: Search, required: false, type: string,
        description: Limit results to those matching a string.}
      - name: exclude
        in: query
        x-ms-summary: Exclude
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Ensure result set excludes specific IDs.
      - name: include
        in: query
        x-ms-summary: Include
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Limit result set to specific ids.
      - {name: offset, in: query, x-ms-summary: Offset, required: false, type: integer,
        format: int32, description: Offset the result set by a specific number of
          items. Applies to hierarchical taxonomies only.}
      - name: order
        in: query
        x-ms-summary: Order
        required: false
        enum: [asc, desc]
        type: string
        description: Order sort attribute ascending or descending.
      - name: orderby
        in: query
        x-ms-summary: Order By
        required: false
        enum: [id, include, name, slug, term_group, description, count]
        type: string
        description: Sort collection by resource attribute.
      - {name: hide_empty, in: query, x-ms-summary: Hide Empty, required: false, type: boolean,
        description: Whether to hide resources not assigned to any products.}
      - {name: parent, in: query, x-ms-summary: Parent, required: false, type: integer,
        format: int32, description: Limit result set to resources assigned to a specific
          parent. Applies to hierarchical taxonomies only.}
      - {name: product, in: query, x-ms-summary: Product, required: false, type: integer,
        format: int32, description: Limit result set to resources assigned to a specific
          product.}
      - {name: slug, in: query, x-ms-summary: Slug, required: false, type: string,
        description: Limit result set to resources with a specific slug.}
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/product_attribute_term'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new product attribute term.
      summary: Create an attribute term
      operationId: ProductsAttributesTermsByAttributeId_POST
      deprecated: false
      parameters:
      - {name: attribute_id, in: path, x-ms-summary: Attribute ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: Unique identifier
          for the attribute of the terms.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product_attribute_term1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_attribute_term'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /products/attributes/{attribute_id}/terms/{id}:
    get:
      description: This action lets you retrieve a product attribute term by ID.
      summary: Retrieve an attribute term
      operationId: GetProductsAttributesTermsByAttributeId_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - {name: attribute_id, in: path, x-ms-summary: Attribute ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: Unique identifier
          for the attribute of the terms.}
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_attribute_term'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    delete:
      description: This action helps you delete a product attribute term.
      summary: Delete an attribute term
      operationId: ProductsAttributesTermsByAttributeId_DELETE
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - {name: attribute_id, in: path, x-ms-summary: Attribute ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: Unique identifier
          for the attribute of the terms.}
      - {name: force, in: query, x-ms-summary: Force, required: false, type: boolean,
        description: 'Required to be true, as resource does not support trashing.'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_attribute_term'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new product attribute term.
      summary: Create an attribute term
      operationId: PostProductsAttributesTermsByAttributeId_POST
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - {name: attribute_id, in: path, x-ms-summary: Attribute ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: Unique identifier
          for the attribute of the terms.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product_attribute_term2'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_attribute_term'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    put:
      description: This action lets you make all changes to a product attribute term.
      summary: Update all of an attribute terms
      operationId: ProductsAttributesTermsByAttributeId_PUT
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - {name: attribute_id, in: path, x-ms-summary: Attribute ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: Unique identifier
          for the attribute of the terms.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product_attribute_term2'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_attribute_term'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    patch:
      description: This action lets you make changes to a product attribute term.
      summary: Update an attribute term
      operationId: ProductsAttributesTermsByAttributeId_PATCH
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - {name: attribute_id, in: path, x-ms-summary: Attribute ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: Unique identifier
          for the attribute of the terms.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product_attribute_term2'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_attribute_term'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /products/attributes:
    get:
      description: This action helps you to view all the product attributes.
      summary: List all product attributes
      operationId: ProductsAttributes_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/product_attribute'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new product attribute.
      summary: Create a product attribute
      operationId: ProductsAttributes_POST
      deprecated: false
      parameters:
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product_attribute1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_attribute'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /products/attributes/{id}:
    get:
      description: This action lets you retrieve and view a specific product attribute
        by ID.
      summary: Retrieve a product attribute
      operationId: ProductsAttributesById_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_attribute'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    delete:
      description: This action helps you delete a product attribute.  This also will
        delete all terms from the selected attribute.
      summary: Delete a product attribute
      operationId: ProductsAttributesById_DELETE
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - {name: force, in: query, x-ms-summary: Force, required: false, type: boolean,
        description: 'Required to be true, as resource does not support trashing.'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_attribute'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new product attribute.
      summary: Create a product attribute by ID
      operationId: ProductsAttributesById_POST
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product_attribute2'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_attribute'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    put:
      description: This action lets you make all changes to a product attribute.
      summary: Update a product attribute
      operationId: ProductsAttributesById_PUT
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product_attribute2'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_attribute'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    patch:
      description: This action lets you make some changes to a product attribute.
      summary: Update a product attribute by select fields
      operationId: ProductsAttributesById_PATCH
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product_attribute2'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_attribute'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /products/categories:
    get:
      description: This action lets you retrieve all product categories.
      summary: List all product categories
      operationId: ProductsCategories_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      - {name: page, in: query, x-ms-summary: Page, required: false, type: integer,
        format: int32, description: Current page of the collection.}
      - {name: per_page, in: query, x-ms-summary: Per Page, required: false, type: integer,
        format: int32, description: Maximum number of items to be returned in result
          set.}
      - {name: search, in: query, x-ms-summary: Search, required: false, type: string,
        description: Limit results to those matching a string.}
      - name: exclude
        in: query
        x-ms-summary: Exclude
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Ensure result set excludes specific IDs.
      - name: include
        in: query
        x-ms-summary: Include
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Limit result set to specific ids.
      - {name: offset, in: query, x-ms-summary: Offset, required: false, type: integer,
        format: int32, description: Offset the result set by a specific number of
          items. Applies to hierarchical taxonomies only.}
      - name: order
        in: query
        x-ms-summary: Order
        required: false
        enum: [asc, desc]
        type: string
        description: Order sort attribute ascending or descending.
      - name: orderby
        in: query
        x-ms-summary: Order By
        required: false
        enum: [id, include, name, slug, term_group, description, count]
        type: string
        description: Sort collection by resource attribute.
      - {name: hide_empty, in: query, x-ms-summary: Hide Empty, required: false, type: boolean,
        description: Whether to hide resources not assigned to any products.}
      - {name: parent, in: query, x-ms-summary: Parent, required: false, type: integer,
        format: int32, description: Limit result set to resources assigned to a specific
          parent. Applies to hierarchical taxonomies only.}
      - {name: product, in: query, x-ms-summary: Product, required: false, type: integer,
        format: int32, description: Limit result set to resources assigned to a specific
          product.}
      - {name: slug, in: query, x-ms-summary: Slug, required: false, type: string,
        description: Limit result set to resources with a specific slug.}
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/product_cat'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new product category.
      summary: Create a product category
      operationId: ProductsCategories_POST
      deprecated: false
      parameters:
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product_cat1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_cat'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /products/categories/{id}:
    get:
      description: This action lets you retrieve a product category by ID.
      summary: Retrieve a product category
      operationId: ProductsCategoriesById_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_cat'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    delete:
      description: This action helps you delete a product category.
      summary: Delete a product category
      operationId: ProductsCategoriesById_DELETE
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - {name: force, in: query, x-ms-summary: Force, required: false, type: boolean,
        description: 'Required to be true, as resource does not support trashing.'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_cat'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new product category by ID.
      summary: Create a product category by ID
      operationId: ProductsCategoriesById_POST
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product_cat2'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_cat'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    put:
      description: This action lets you make all changes to a product category.
      summary: Update all of a product category
      operationId: ProductsCategoriesById_PUT
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product_cat2'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_cat'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    patch:
      description: This action lets you make some changes to a product category.
      summary: Update some of a product category
      operationId: ProductsCategoriesById_PATCH
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product_cat2'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_cat'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /products/reviews:
    get:
      description: This action lets you retrieve all product reviews.
      summary: List all product reviews
      operationId: ProductsReviews_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      - {name: page, in: query, x-ms-summary: Page, required: false, type: integer,
        format: int32, description: Current page of the collection.}
      - {name: per_page, in: query, x-ms-summary: Per Page, required: false, type: integer,
        format: int32, description: Maximum number of items to be returned in result
          set.}
      - {name: search, in: query, x-ms-summary: Search, required: false, type: string,
        description: Limit results to those matching a string.}
      - {name: after, in: query, x-ms-summary: After, required: false, type: string,
        description: Limit response to resources published after a given ISO8601 compliant
          date.}
      - {name: before, in: query, x-ms-summary: Before, required: false, type: string,
        description: Limit response to reviews published before a given ISO8601 compliant
          date.}
      - name: exclude
        in: query
        x-ms-summary: Exclude
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Ensure result set excludes specific IDs.
      - name: include
        in: query
        x-ms-summary: Include
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Limit result set to specific IDs.
      - {name: offset, in: query, x-ms-summary: Offset, required: false, type: integer,
        format: int32, description: Offset the result set by a specific number of
          items.}
      - name: order
        in: query
        x-ms-summary: Order
        required: false
        enum: [asc, desc]
        type: string
        description: Order sort attribute ascending or descending.
      - name: orderby
        in: query
        x-ms-summary: Order By
        required: false
        enum: [date, date_gmt, id, include, product]
        type: string
        description: Sort collection by object attribute.
      - name: reviewer
        in: query
        x-ms-summary: Reviewer
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Limit result set to reviews assigned to specific user IDs.
      - name: reviewer_exclude
        in: query
        x-ms-summary: Exclude Reviewer
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Ensure result set excludes reviews assigned to specific user
          IDs.
      - {name: reviewer_email, in: query, x-ms-summary: Reviewer's Email, required: false,
        type: string, description: Limit result set to that from a specific author
          email.}
      - name: product
        in: query
        x-ms-summary: Product
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Limit result set to reviews assigned to specific product IDs.
      - name: status
        in: query
        x-ms-summary: Status
        required: false
        enum: [all, hold, approved, spam, trash]
        type: string
        description: Limit result set to reviews assigned a specific status.
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/product_review'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new product review.
      summary: Create a product review
      operationId: ProductsReviews_POST
      deprecated: false
      parameters:
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product_review1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_review'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /products/reviews/{id}:
    get:
      description: This action lets you retrieve a product review by ID.
      summary: Retrieve a product review
      operationId: ProductsReviewsById_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_review'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    delete:
      description: This action helps you delete a product review.
      summary: Delete a product review
      operationId: ProductsReviewsById_DELETE
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - {name: force, in: query, x-ms-summary: Force, required: false, type: boolean,
        description: Whether to bypass trash and force deletion.}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_review'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new product review.
      summary: Create a product review by ID
      operationId: ProductsReviewsById_POST
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product_review2'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_review'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    put:
      description: This action lets you make all changes to a product review.
      summary: Update all of a product review
      operationId: ProductsReviewsById_PUT
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product_review2'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_review'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    patch:
      description: This action lets you make some changes to a product review.
      summary: Update some of a product review
      operationId: ProductsReviewsById_PATCH
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product_review2'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_review'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /products/shipping_classes:
    get:
      description: This action lets you retrieve all product shipping classes.
      summary: List all shipping classes
      operationId: ProductsShippingClasses_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      - {name: page, in: query, x-ms-summary: Page, required: false, type: integer,
        format: int32, description: Current page of the collection.}
      - {name: per_page, in: query, x-ms-summary: Per Page, required: false, type: integer,
        format: int32, description: Maximum number of items to be returned in result
          set.}
      - {name: search, in: query, x-ms-summary: Search, required: false, type: string,
        description: Limit results to those matching a string.}
      - name: exclude
        in: query
        x-ms-summary: Exclude
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Ensure result set excludes specific IDs.
      - name: include
        in: query
        x-ms-summary: Include
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Limit result set to specific ids.
      - {name: offset, in: query, x-ms-summary: Offset, required: false, type: integer,
        format: int32, description: Offset the result set by a specific number of
          items. Applies to hierarchical taxonomies only.}
      - name: order
        in: query
        x-ms-summary: Order
        required: false
        enum: [asc, desc]
        type: string
        description: Order sort attribute ascending or descending.
      - name: orderby
        in: query
        x-ms-summary: Order By
        required: false
        enum: [id, include, name, slug, term_group, description, count]
        type: string
        description: Sort collection by resource attribute.
      - {name: hide_empty, in: query, x-ms-summary: Hide Empty, required: false, type: boolean,
        description: Whether to hide resources not assigned to any products.}
      - {name: parent, in: query, x-ms-summary: Parent, required: false, type: integer,
        format: int32, description: Limit result set to resources assigned to a specific
          parent. Applies to hierarchical taxonomies only.}
      - {name: product, in: query, x-ms-summary: Product, required: false, type: integer,
        format: int32, description: Limit result set to resources assigned to a specific
          product.}
      - {name: slug, in: query, x-ms-summary: Slug, required: false, type: string,
        description: Limit result set to resources with a specific slug.}
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/product_shipping_class'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new product shipping class.
      summary: Create a shipping class
      operationId: ProductsShippingClasses_POST
      deprecated: false
      parameters:
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product_shipping_class1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_shipping_class'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /products/shipping_classes/{id}:
    get:
      description: This action lets you retrieve a product shipping class by ID.
      summary: Retrieve a shipping class
      operationId: ProductsShippingClassesById_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_shipping_class'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    delete:
      description: This action helps you delete a product shipping class.
      summary: Delete a shipping class
      operationId: ProductsShippingClassesById_DELETE
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - {name: force, in: query, x-ms-summary: Force, required: false, type: boolean,
        description: 'Required to be true, as resource does not support trashing.'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_shipping_class'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new product shipping class by
        ID.
      summary: Create a shipping class by ID
      operationId: ProductsShippingClassesById_POST
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product_shipping_class2'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_shipping_class'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    put:
      description: This action lets you make all changes to a product shipping class.
      summary: Update all of a shipping class
      operationId: ProductsShippingClassesById_PUT
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product_shipping_class2'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_shipping_class'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    patch:
      description: This action lets you make some changes to a product shipping class.
      summary: Update some of a shipping class
      operationId: ProductsShippingClassesById_PATCH
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product_shipping_class2'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_shipping_class'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /products/tags:
    get:
      description: This action lets you retrieve all product tags.
      summary: List all product tags
      operationId: ProductsTags_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      - {name: page, in: query, x-ms-summary: Page, required: false, type: integer,
        format: int32, description: Current page of the collection.}
      - {name: per_page, in: query, x-ms-summary: Per Page, required: false, type: integer,
        format: int32, description: Maximum number of items to be returned in result
          set.}
      - {name: search, in: query, x-ms-summary: Search, required: false, type: string,
        description: Limit results to those matching a string.}
      - name: exclude
        in: query
        x-ms-summary: Exclude
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Ensure result set excludes specific IDs.
      - name: include
        in: query
        x-ms-summary: Include
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Limit result set to specific ids.
      - {name: offset, in: query, x-ms-summary: Offset, required: false, type: integer,
        format: int32, description: Offset the result set by a specific number of
          items. Applies to hierarchical taxonomies only.}
      - name: order
        in: query
        x-ms-summary: Order
        required: false
        enum: [asc, desc]
        type: string
        description: Order sort attribute ascending or descending.
      - name: orderby
        in: query
        x-ms-summary: Order By
        required: false
        enum: [id, include, name, slug, term_group, description, count]
        type: string
        description: Sort collection by resource attribute.
      - {name: hide_empty, in: query, x-ms-summary: Hide Empty, required: false, type: boolean,
        description: Whether to hide resources not assigned to any products.}
      - {name: parent, in: query, x-ms-summary: Parent, required: false, type: integer,
        format: int32, description: Limit result set to resources assigned to a specific
          parent. Applies to hierarchical taxonomies only.}
      - {name: product, in: query, x-ms-summary: Product, required: false, type: integer,
        format: int32, description: Limit result set to resources assigned to a specific
          product.}
      - {name: slug, in: query, x-ms-summary: Slug, required: false, type: string,
        description: Limit result set to resources with a specific slug.}
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/product_tag'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new product tag.
      summary: Create a product tag
      operationId: ProductsTags_POST
      deprecated: false
      parameters:
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product_tag1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_tag'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /products/tags/{id}:
    get:
      description: This action lets you retrieve a product tag by ID.
      summary: Retrieve a product tag
      operationId: ProductsTagsById_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_tag'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    delete:
      description: This action helps you delete a product tag.
      summary: Delete a product tag
      operationId: ProductsTagsById_DELETE
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - {name: force, in: query, x-ms-summary: Force, required: false, type: boolean,
        description: 'Required to be true, as resource does not support trashing.'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_tag'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new product tag by ID.
      summary: Create a product tag by ID
      operationId: ProductsTagsById_POST
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product_tag2'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_tag'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    put:
      description: This action lets you make all changes to a product tag.
      summary: Update all of a product tag
      operationId: ProductsTagsById_PUT
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product_tag2'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_tag'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    patch:
      description: This action lets you make some changes to a product tag.
      summary: Update some of a product tag
      operationId: ProductsTagsById_PATCH
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product_tag2'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_tag'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /products:
    get:
      description: This action helps you to view all the products.
      summary: List all products
      operationId: Products_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      - {name: page, in: query, x-ms-summary: Page, required: false, type: integer,
        format: int32, description: Current page of the collection.}
      - {name: per_page, in: query, x-ms-summary: Per Page, required: false, type: integer,
        format: int32, description: Maximum number of items to be returned in result
          set.}
      - {name: search, in: query, x-ms-summary: Search, required: false, type: string,
        description: Limit results to those matching a string.}
      - {name: after, in: query, x-ms-summary: After, required: false, type: string,
        description: Limit response to resources published after a given ISO8601 compliant
          date.}
      - {name: before, in: query, x-ms-summary: Before, required: false, type: string,
        description: Limit response to resources published before a given ISO8601
          compliant date.}
      - {name: modified_after, in: query, x-ms-summary: Modified After, required: false,
        type: string, description: Limit response to resources modified after a given
          ISO8601 compliant date.}
      - {name: modified_before, in: query, x-ms-summary: Modified Before, required: false,
        type: string, description: Limit response to resources modified before a given
          ISO8601 compliant date.}
      - {name: dates_are_gmt, in: query, x-ms-summary: Dates Are GMT, required: false,
        type: boolean, description: Whether to consider GMT post dates when limiting
          response by published or modified date.}
      - name: exclude
        in: query
        x-ms-summary: Exclude
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Ensure result set excludes specific IDs.
      - name: include
        in: query
        x-ms-summary: Include
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Limit result set to specific ids.
      - {name: offset, in: query, x-ms-summary: Offset, required: false, type: integer,
        format: int32, description: Offset the result set by a specific number of
          items.}
      - name: order
        in: query
        x-ms-summary: Order
        required: false
        enum: [asc, desc]
        type: string
        description: Order sort attribute ascending or descending.
      - name: orderby
        in: query
        x-ms-summary: Order By
        required: false
        enum: [date, id, include, title, slug, modified, menu_order, price, popularity,
          rating]
        type: string
        description: Sort collection by object attribute.
      - name: parent
        in: query
        x-ms-summary: Parent
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Limit result set to those of particular parent IDs.
      - name: parent_exclude
        in: query
        x-ms-summary: Parent Exclude
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Limit result set to all items except those of a particular parent
          ID.
      - {name: slug, in: query, x-ms-summary: Slug, required: false, type: string,
        description: Limit result set to products with a specific slug.}
      - name: status
        in: query
        x-ms-summary: Status
        required: false
        enum: [any, future, trash, draft, pending, private, publish]
        type: string
        description: Limit result set to products assigned a specific status.
      - name: type
        in: query
        x-ms-summary: Type
        required: false
        enum: [simple, grouped, external, variable]
        type: string
        description: Limit result set to products assigned a specific type.
      - {name: sku, in: query, x-ms-summary: SKU, required: false, type: string, description: Limit
          result set to products with specific SKU(s). Use commas to separate.}
      - {name: featured, in: query, x-ms-summary: Featured, required: false, type: boolean,
        description: Limit result set to featured products.}
      - {name: category, in: query, x-ms-summary: Category, required: false, type: string,
        description: Limit result set to products assigned a specific category ID.}
      - {name: tag, in: query, x-ms-summary: Tag, required: false, type: string, description: Limit
          result set to products assigned a specific tag ID.}
      - {name: shipping_class, in: query, x-ms-summary: Shipping Class, required: false,
        type: string, description: Limit result set to products assigned a specific
          shipping class ID.}
      - {name: attribute, in: query, x-ms-summary: Attribute, required: false, type: string,
        description: Limit result set to products with a specific attribute. Use the
          taxonomy name/attribute slug.}
      - {name: attribute_term, in: query, x-ms-summary: Attribute Term, required: false,
        type: string, description: Limit result set to products with a specific attribute
          term ID (required an assigned attribute).}
      - {name: on_sale, in: query, x-ms-summary: On Sale, required: false, type: boolean,
        description: Limit result set to products on sale.}
      - {name: min_price, in: query, x-ms-summary: Min Price, required: false, type: string,
        description: Limit result set to products based on a minimum price.}
      - {name: max_price, in: query, x-ms-summary: Max Price, required: false, type: string,
        description: Limit result set to products based on a maximum price.}
      - name: stock_status
        in: query
        x-ms-summary: Stock Status
        required: false
        enum: [instock, outofstock, onbackorder]
        type: string
        description: Limit result set to products with specified stock status.
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/product'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new product.
      summary: Create a product
      operationId: Products_POST
      deprecated: false
      parameters:
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /products/{id}:
    get:
      description: This action lets you retrieve and view a specific product by ID.
      summary: Retrieve a product
      operationId: ProductsById_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    delete:
      description: This action helps you delete a product.
      summary: Delete a product
      operationId: ProductsById_DELETE
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - {name: force, in: query, x-ms-summary: Force, required: false, type: boolean,
        description: Whether to bypass trash and force deletion.}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new product by ID.
      summary: Create a product by ID
      operationId: ProductsById_POST
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    put:
      description: This action lets you make all changes to a product.
      summary: Update all of a product
      operationId: ProductsById_PUT
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    patch:
      description: This action lets you make some changes to a product.
      summary: Update some of a product
      operationId: ProductsById_PATCH
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /products/{product_id}/variations:
    get:
      description: This action helps you to view all the product variations.
      summary: List all product variations
      operationId: ProductsVariationsByProductId_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: product_id, in: path, x-ms-summary: Product ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: Unique identifier
          for the variable product.}
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      - {name: page, in: query, x-ms-summary: Page, required: false, type: integer,
        format: int32, description: Current page of the collection.}
      - {name: per_page, in: query, x-ms-summary: Per Page, required: false, type: integer,
        format: int32, description: Maximum number of items to be returned in result
          set.}
      - {name: search, in: query, x-ms-summary: Search, required: false, type: string,
        description: Limit results to those matching a string.}
      - {name: after, in: query, x-ms-summary: After, required: false, type: string,
        description: Limit response to resources published after a given ISO8601 compliant
          date.}
      - {name: before, in: query, x-ms-summary: Before, required: false, type: string,
        description: Limit response to resources published before a given ISO8601
          compliant date.}
      - {name: modified_after, in: query, x-ms-summary: Modified After, required: false,
        type: string, description: Limit response to resources modified after a given
          ISO8601 compliant date.}
      - {name: modified_before, in: query, x-ms-summary: Modified Before, required: false,
        type: string, description: Limit response to resources modified before a given
          ISO8601 compliant date.}
      - {name: dates_are_gmt, in: query, x-ms-summary: Dates Are GMT, required: false,
        type: boolean, description: Whether to consider GMT post dates when limiting
          response by published or modified date.}
      - name: exclude
        in: query
        x-ms-summary: Exclude
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Ensure result set excludes specific IDs.
      - name: include
        in: query
        x-ms-summary: Include
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Limit result set to specific ids.
      - {name: offset, in: query, x-ms-summary: Offset, required: false, type: integer,
        format: int32, description: Offset the result set by a specific number of
          items.}
      - name: order
        in: query
        x-ms-summary: Order
        required: false
        enum: [asc, desc]
        type: string
        description: Order sort attribute ascending or descending.
      - name: orderby
        in: query
        x-ms-summary: Order By
        required: false
        enum: [date, id, include, title, slug, modified, menu_order]
        type: string
        description: Sort collection by object attribute.
      - name: parent
        in: query
        x-ms-summary: Parent
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Limit result set to those of particular parent IDs.
      - name: parent_exclude
        in: query
        x-ms-summary: Parent Exclude
        required: false
        type: array
        items: {type: integer, format: int32}
        description: Limit result set to all items except those of a particular parent
          ID.
      - {name: slug, in: query, x-ms-summary: Slug, required: false, type: string,
        description: Limit result set to products with a specific slug.}
      - name: status
        in: query
        x-ms-summary: Status
        required: false
        enum: [any, future, trash, draft, pending, private, publish]
        type: string
        description: Limit result set to products assigned a specific status.
      - {name: sku, in: query, x-ms-summary: SKU, required: false, type: string, description: Limit
          result set to products with specific SKU(s). Use commas to separate.}
      - {name: on_sale, in: query, x-ms-summary: On Sale, required: false, type: boolean,
        description: Limit result set to products on sale.}
      - {name: min_price, in: query, x-ms-summary: Min Price, required: false, type: string,
        description: Limit result set to products based on a minimum price.}
      - {name: max_price, in: query, x-ms-summary: Max Price, required: false, type: string,
        description: Limit result set to products based on a maximum price.}
      - name: stock_status
        in: query
        x-ms-summary: Stock Status
        required: false
        enum: [instock, outofstock, onbackorder]
        type: string
        description: Limit result set to products with specified stock status.
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/product_variation'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new product variation.
      summary: Create a product variation
      operationId: ProductsVariationsByProductId_POST
      deprecated: false
      parameters:
      - {name: product_id, in: path, x-ms-summary: Product ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: Unique identifier
          for the variable product.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product_variation1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_variation'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /products/{product_id}/variations/{id}:
    get:
      description: This action lets you retrieve and view a specific product variation
        by ID.
      summary: Retrieve a product variation
      operationId: ProductsVariationsByProductIdAndId_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: product_id, in: path, x-ms-summary: Product ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: Unique identifier
          for the variable product.}
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the variation.}
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_variation'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    delete:
      description: This action helps you delete a product variation.
      summary: Delete a product variation
      operationId: ProductsVariationsByProductIdAndId_DELETE
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: product_id, in: path, x-ms-summary: Product ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: Unique identifier
          for the variable product.}
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the variation.}
      - {name: force, in: query, x-ms-summary: Force, required: false, type: boolean,
        description: Whether to bypass trash and force deletion.}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_variation'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new product variation.
      summary: Create a product variation
      operationId: ProductsVariationsByProductIdAndId_POST
      deprecated: false
      parameters:
      - {name: product_id, in: path, x-ms-summary: Product ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: Unique identifier
          for the variable product.}
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the variation.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product_variation1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_variation'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    put:
      description: This action lets you make all changes to a product variation.
      summary: Update all of a product variation
      operationId: ProductsVariationsByProductIdAndId_PUT
      deprecated: false
      parameters:
      - {name: product_id, in: path, x-ms-summary: Product ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: Unique identifier
          for the variable product.}
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the variation.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product_variation1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_variation'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    patch:
      description: This action lets you make some changes to a product variation.
      summary: Update some of a product variation
      operationId: ProductsVariationsByProductIdAndId_PATCH
      deprecated: false
      parameters:
      - {name: product_id, in: path, x-ms-summary: Product ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: Unique identifier
          for the variable product.}
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the variation.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/product_variation1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/product_variation'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /reports/sales:
    get:
      description: This action lets you retrieve and view a sales report.
      summary: Retrieve sales report
      operationId: ReportsSales_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      - name: period
        in: query
        x-ms-summary: Period
        required: false
        enum: [week, month, last_month, year]
        type: string
        description: Report period.
      - {name: date_min, in: query, x-ms-summary: Min Date, required: false, type: string,
        format: date, description: 'Return sales for a specific start date, the date
          need to be in the YYYY-MM-DD format.'}
      - {name: date_max, in: query, x-ms-summary: Max Date, required: false, type: string,
        format: date, description: 'Return sales for a specific end date, the date
          need to be in the YYYY-MM-DD format.'}
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/sales_report'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /reports/top_sellers:
    get:
      description: This action lets you retrieve and view a list of top sellers report.
      summary: Retrieve top sellers report
      operationId: ReportsTopSellers_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      - name: period
        in: query
        x-ms-summary: Period
        required: false
        enum: [week, month, last_month, year]
        type: string
        description: Report period.
      - {name: date_min, in: query, x-ms-summary: Min Date, required: false, type: string,
        format: date, description: 'Return sales for a specific start date, the date
          need to be in the YYYY-MM-DD format.'}
      - {name: date_max, in: query, x-ms-summary: Max Date, required: false, type: string,
        format: date, description: 'Return sales for a specific end date, the date
          need to be in the YYYY-MM-DD format.'}
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/top_sellers_report'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /reports/orders/totals:
    get:
      description: This action lets you retrieve and view orders totals report.
      summary: Retrieve orders totals
      operationId: ReportsOrdersTotals_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/report_order_total'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /reports/products/totals:
    get:
      description: This action lets you retrieve and view products totals report.
      summary: Retrieve products totals
      operationId: ReportsProductsTotals_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/report_product_total'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /reports/customers/totals:
    get:
      description: This action lets you retrieve and view customers totals report.
      summary: Retrieve customers totals
      operationId: ReportsCustomersTotals_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/report_customer_total'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /reports/coupons/totals:
    get:
      description: This action lets you retrieve and view coupons totals report.
      summary: Retrieve coupons totals
      operationId: ReportsCouponsTotals_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/report_coupon_total'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /reports/reviews/totals:
    get:
      description: This action lets you retrieve and view reviews totals report.
      summary: Retrieve reviews totals
      operationId: ReportsReviewsTotals_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/report_review_total'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /reports:
    get:
      description: This action lets you retrieve and view a simple list of available
        reports.
      summary: List all reports
      operationId: Reports_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/report'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /shipping/zones:
    get:
      description: This action helps you to view all the shipping zones.
      summary: List all shipping zones
      operationId: ShippingZones_GET
      deprecated: false
      produces: [application/json]
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/shipping_zone'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new shipping zone.
      summary: Create a shipping zone
      operationId: ShippingZones_POST
      deprecated: false
      parameters:
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/shipping_zone1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shipping_zone'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /shipping/zones/{id}:
    get:
      description: This action lets you retrieve and view a specific shipping zone
        by ID.
      summary: Retrieve a shipping zone
      operationId: ShippingZonesById_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique ID for the resource.}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shipping_zone'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    delete:
      description: This action helps you delete a shipping zone.
      summary: Delete a shipping zone
      operationId: ShippingZonesById_DELETE
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique ID for the resource.}
      - {name: force, in: query, x-ms-summary: Force, required: false, type: boolean,
        description: Whether to bypass trash and force deletion.}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shipping_zone'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new shipping zone by ID.
      summary: Create a shipping zone
      operationId: ShippingZonesById_POST
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique ID for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/shipping_zone1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shipping_zone'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    put:
      description: This action lets you make all changes to a shipping zone.
      summary: Update all of a shipping zone
      operationId: ShippingZonesById_PUT
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique ID for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/shipping_zone1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shipping_zone'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    patch:
      description: This action lets you make some changes to a shipping zone.
      summary: Update some of a shipping zone
      operationId: ShippingZonesById_PATCH
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique ID for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/shipping_zone1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shipping_zone'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /shipping/zones/{id}/locations:
    get:
      description: This action helps you to view all the locations of a shipping zone.
      summary: List all locations of a shipping zone
      operationId: ShippingZonesLocationsById_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique ID for the resource.}
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/shipping_zone_location'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new location.
      summary: Create a location for a shipping zone by ID
      operationId: ShippingZonesLocationsById_POST
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique ID for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/shipping_zone_location'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shipping_zone_location'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    put:
      description: This action lets you make all changes to a location of a shipping
        zone.
      summary: Update all of a location of a shipping zone
      operationId: ShippingZonesLocationsById_PUT
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique ID for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/shipping_zone_location'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shipping_zone_location'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    patch:
      description: This action lets you make some changes to a location of a shipping
        zone.
      summary: Update some of a location of a shipping zone
      operationId: ShippingZonesLocationsById_PATCH
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique ID for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/shipping_zone_location'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shipping_zone_location'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /shipping/zones/{zone_id}/methods:
    get:
      description: This action helps you to view all the shipping methods from a shipping
        zone.
      summary: List all shipping methods from a shipping zone
      operationId: ShippingZonesMethodsByZoneId_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: zone_id, in: path, x-ms-summary: Zone ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: Unique ID for the
          zone.}
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/shipping_zone_method'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new method for a shipping zone.
      summary: Create a shipping method from a shipping zone
      operationId: ShippingZonesMethodsByZoneId_POST
      deprecated: false
      parameters:
      - {name: zone_id, in: path, x-ms-summary: Zone ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: Unique ID for the
          zone.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/shipping_zone_method1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shipping_zone_method'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /shipping/zones/{zone_id}/methods/{instance_id}:
    get:
      description: This action lets you retrieve and view a specific shipping method
        from a shipping zone by ID.
      summary: Retrieve a shipping method from a shipping zone
      operationId: GetShippingZonesMethodsByZoneId_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: zone_id, in: path, x-ms-summary: Zone ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: Unique ID for the
          zone.}
      - {name: instance_id, in: path, x-ms-summary: Instance ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: Unique ID for the
          instance.}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shipping_zone_method'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    delete:
      description: This action helps you delete a shipping method from a shipping
        zone.
      summary: Delete a shipping method from a shipping zone
      operationId: ShippingZonesMethodsByZoneId_DELETE
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: zone_id, in: path, x-ms-summary: Zone ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: Unique ID for the
          zone.}
      - {name: instance_id, in: path, x-ms-summary: Instance ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: Unique ID for the
          instance.}
      - {name: force, in: query, x-ms-summary: Force, required: false, type: boolean,
        description: Whether to bypass trash and force deletion.}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shipping_zone_method'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new shipping method to a shipping
        zone.
      summary: Include a shipping method to a shipping zone
      operationId: PostShippingZonesMethodsByZoneId_POST
      deprecated: false
      parameters:
      - {name: zone_id, in: path, x-ms-summary: Zone ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: Unique ID for the
          zone.}
      - {name: instance_id, in: path, x-ms-summary: Instance ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: Unique ID for the
          instance.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/shipping_zone_method2'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shipping_zone_method'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    put:
      description: This action lets you make all changes to a shipping method of a
        shipping zone.
      summary: Update all of a shipping method of a shipping zone
      operationId: ShippingZonesMethodsByZoneId_PUT
      deprecated: false
      parameters:
      - {name: zone_id, in: path, x-ms-summary: Zone ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: Unique ID for the
          zone.}
      - {name: instance_id, in: path, x-ms-summary: Instance ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: Unique ID for the
          instance.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/shipping_zone_method2'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shipping_zone_method'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    patch:
      description: This action lets you make some changes to a shipping method of
        a shipping zone.
      summary: Update some of a shipping method of a shipping zone
      operationId: ShippingZonesMethodsByZoneId_PATCH
      deprecated: false
      parameters:
      - {name: zone_id, in: path, x-ms-summary: Zone ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: Unique ID for the
          zone.}
      - {name: instance_id, in: path, x-ms-summary: Instance ID, x-ms-url-encoding: single,
        required: true, type: integer, format: int32, description: Unique ID for the
          instance.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/shipping_zone_method2'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shipping_zone_method'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /taxes/classes:
    get:
      description: This action helps you to view all tax classes.
      summary: List all tax classes
      operationId: TaxesClasses_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/tax_class'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new tax class.
      summary: Create a tax class
      operationId: TaxesClasses_POST
      deprecated: false
      parameters:
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/tax_class1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/tax_class'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /taxes/classes/{slug}:
    get:
      description: This action helps you to return a tax class.
      summary: Retrieve a tax class
      operationId: TaxesClassesBySlug_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: slug, in: path, x-ms-summary: Slug, x-ms-url-encoding: single, required: true,
        type: string, description: Unique slug for the resource.}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/tax_class'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    delete:
      description: This action helps you to delete a tax class.
      summary: Delete a tax class
      operationId: TaxesClassesBySlug_DELETE
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: slug, in: path, x-ms-summary: Slug, x-ms-url-encoding: single, required: true,
        type: string, description: Unique slug for the resource.}
      - {name: force, in: query, x-ms-summary: Force, required: false, type: boolean,
        description: 'Required to be true, as resource does not support trashing.'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/tax_class'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /taxes:
    get:
      description: This action helps you to view all the tax rates.
      summary: List all tax rates
      operationId: Taxes_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      - {name: page, in: query, x-ms-summary: Page, required: false, type: integer,
        format: int32, description: Current page of the collection.}
      - {name: per_page, in: query, x-ms-summary: Per Page, required: false, type: integer,
        format: int32, description: Maximum number of items to be returned in result
          set.}
      - {name: offset, in: query, x-ms-summary: Offset, required: false, type: integer,
        format: int32, description: Offset the result set by a specific number of
          items.}
      - name: order
        in: query
        x-ms-summary: Order
        required: false
        enum: [asc, desc]
        type: string
        description: Order sort attribute ascending or descending.
      - name: orderby
        in: query
        x-ms-summary: Order By
        required: false
        enum: [id, order, priority]
        type: string
        description: Sort collection by object attribute.
      - name: class
        in: query
        x-ms-summary: Class
        required: false
        enum: [standard, reduced-rate, zero-rate]
        type: string
        description: Sort by tax class.
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/tax'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new tax rate.
      summary: Create a tax rate
      operationId: Taxes_POST
      deprecated: false
      parameters:
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/tax1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/tax'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /taxes/{id}:
    get:
      description: This action lets you retrieve and view a specific tax rate by ID.
      summary: Retrieve a tax rate
      operationId: TaxesById_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/tax'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    delete:
      description: This action helps you delete a tax rate.
      summary: Delete a tax rate
      operationId: TaxesById_DELETE
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - {name: force, in: query, x-ms-summary: Force, required: false, type: boolean,
        description: 'Required to be true, as resource does not support trashing.'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/tax'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action helps you to create a new tax rate.
      summary: Create a tax rate
      operationId: TaxesById_POST
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/tax1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/tax'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    put:
      description: This action lets you make all changes to a tax rate.
      summary: Update all of a tax rate
      operationId: TaxesById_PUT
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/tax1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/tax'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    patch:
      description: This action lets you make some changes to a tax rate.
      summary: Update some of a tax rate
      operationId: TaxesById_PATCH
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: integer, format: int32, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/tax1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/tax'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /system_status:
    get:
      description: This action helps you to view all the system status items.
      summary: List all system status items
      operationId: SystemStatus_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/system_status'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /system_status/tools:
    get:
      description: This action helps you to view all tools from system status.
      summary: List all tools from system status
      operationId: SystemStatusTools_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/system_status_tool'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /system_status/tools/{id}:
    get:
      description: This action lets you retrieve and view a specific tool from system
        status by ID.
      summary: Retrieve a tool from system status
      operationId: SystemStatusToolsById_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: string, description: Unique identifier for the resource.}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/system_status_tool'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action lets you create a specific tool from system status
        by ID.
      summary: Create a tool from system status
      operationId: SystemStatusToolsById_POST
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: string, description: A unique identifier for the tool.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/system_status_tool1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/system_status_tool'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    put:
      description: This action lets you run a tool from system status.
      summary: Run a tool from system status
      operationId: SystemStatusToolsById_PUT
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: string, description: A unique identifier for the tool.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/system_status_tool1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/system_status_tool'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /shipping_methods:
    get:
      description: This action helps you to view all the shipping methods.
      summary: List all shipping methods
      operationId: ShippingMethods_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/shipping_method'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /shipping_methods/{id}:
    get:
      description: This action lets you retrieve and view a specific shipping method.
      summary: Retrieve a shipping method
      operationId: ShippingMethodsById_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: string, description: Unique identifier for the resource.}
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/shipping_method'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /payment_gateways:
    get:
      description: This action helps you to view all the payment gateways.
      summary: List all payment gateways
      operationId: PaymentGateways_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/payment_gateway'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /payment_gateways/{id}:
    get:
      description: This action lets you retrieve and view a specific payment gateway.
      summary: Retrieve a payment gateway
      operationId: PaymentGatewaysById_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: string, description: Unique identifier for the resource.}
      - name: context
        in: query
        x-ms-summary: Context
        required: false
        enum: [view, edit]
        type: string
        description: Scope under which the request is made; determines fields present
          in response.
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/payment_gateway'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    post:
      description: This action lets you create a specific payment gateway by ID.
      summary: Create a payment gateway by ID
      operationId: PaymentGatewaysById_POST
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: string, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/payment_gateway1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/payment_gateway'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    put:
      description: This action lets you make all changes to a payment gateway.
      summary: Update all of a payment gateway
      operationId: PaymentGatewaysById_PUT
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: string, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/payment_gateway1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/payment_gateway'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
    patch:
      description: This action lets you make some changes to a payment gateway.
      summary: Update some of a payment gateway
      operationId: PaymentGatewaysById_PATCH
      deprecated: false
      parameters:
      - {name: id, in: path, x-ms-summary: ID, x-ms-url-encoding: single, required: true,
        type: string, description: Unique identifier for the resource.}
      - name: body
        in: body
        required: true
        description: The body.
        schema: {$ref: '#/definitions/payment_gateway1'}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/payment_gateway'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /data:
    get:
      description: This action lets you retrieve and view a simple list of available
        data endpoints.
      summary: List all data
      operationId: Data_GET
      deprecated: false
      produces: [application/json]
      parameters: []
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/data_index'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /data/continents:
    get:
      description: This action helps you to view all the continents.
      summary: List all continents
      operationId: DataContinents_GET
      deprecated: false
      produces: [application/json]
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/data_continents'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /data/continents/{location}:
    get:
      description: This action lets you retrieve and view a continent data.
      summary: Retrieve continent data
      operationId: DataContinentsByLocation_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: location, in: path, x-ms-summary: Location, x-ms-url-encoding: single,
        required: true, type: string, description: 2 character continent code.}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/data_continents'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /data/countries:
    get:
      description: This action helps you to view all the countries.
      summary: List all countries
      operationId: DataCountries_GET
      deprecated: false
      produces: [application/json]
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/data_countries'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /data/countries/{location}:
    get:
      description: This action lets you retrieve and view a country data.
      summary: Retrieve country data
      operationId: DataCountriesByLocation_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: location, in: path, x-ms-summary: Location, x-ms-url-encoding: single,
        required: true, type: string, description: ISO3166 alpha-2 country code.}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/data_countries'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /data/currencies:
    get:
      description: This action helps you to view all the currencies.
      summary: List all currencies
      operationId: DataCurrencies_GET
      deprecated: false
      produces: [application/json]
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            type: array
            items: {$ref: '#/definitions/data_currencies'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /data/currencies/current:
    get:
      description: This action lets you retrieve and view current currency data.
      summary: Retrieve current currency
      operationId: DataCurrenciesCurrent_GET
      deprecated: false
      produces: [application/json]
      parameters: []
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/data_currencies'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
  /data/currencies/{currency}:
    get:
      description: This action lets you retrieve and view a currency data.
      summary: Retrieve currency data
      operationId: DataCurrenciesByCurrency_GET
      deprecated: false
      produces: [application/json]
      parameters:
      - {name: currency, in: path, x-ms-summary: Currency, x-ms-url-encoding: single,
        required: true, type: string, description: ISO4217 currency code.}
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/data_currencies'}
          headers: {}
        '400':
          description: Bad Request
          headers: {}
        '404':
          description: Not Found
          headers: {}
definitions:
  shop_coupon:
    title: shop_coupon
    type: object
    properties:
      id: {description: Unique identifier for the object., type: integer, format: int32}
      code: {description: Coupon code., type: string}
      amount: {description: 'The amount of discount. Should always be numeric, even
          if setting a percentage.', type: string}
      date_created: {description: 'The date the coupon was created, in the site''s
          timezone.', type: string}
      date_created_gmt: {description: 'The date the coupon was created, as GMT.',
        type: string}
      date_modified: {description: 'The date the coupon was last modified, in the
          site''s timezone.', type: string}
      date_modified_gmt: {description: 'The date the coupon was last modified, as
          GMT.', type: string}
      discount_type: {$ref: '#/definitions/DiscountType'}
      description: {description: Coupon description., type: string}
      date_expires: {description: 'The date the coupon expires, in the site''s timezone.',
        type: string}
      date_expires_gmt: {description: 'The date the coupon expires, as GMT.', type: string}
      usage_count: {description: Number of times the coupon has been used already.,
        type: integer, format: int32}
      individual_use: {description: 'If true, the coupon can only be used individually.
          Other applied coupons will be removed from the cart.', type: boolean}
      product_ids:
        description: List of product IDs the coupon can be used on.
        type: array
        items: {type: integer, format: int32}
      excluded_product_ids:
        description: List of product IDs the coupon cannot be used on.
        type: array
        items: {type: integer, format: int32}
      usage_limit: {description: How many times the coupon can be used in total.,
        type: integer, format: int32}
      usage_limit_per_user: {description: How many times the coupon can be used per
          customer., type: integer, format: int32}
      limit_usage_to_x_items: {description: Max number of items in the cart the coupon
          can be applied to., type: integer, format: int32}
      free_shipping: {description: 'If true and if the free shipping method requires
          a coupon, this coupon will enable free shipping.', type: boolean}
      product_categories:
        description: List of category IDs the coupon applies to.
        type: array
        items: {type: integer, format: int32}
      excluded_product_categories:
        description: List of category IDs the coupon does not apply to.
        type: array
        items: {type: integer, format: int32}
      exclude_sale_items: {description: 'If true, this coupon will not be applied
          to items that have sale prices.', type: boolean}
      minimum_amount: {description: Minimum order amount that needs to be in the cart
          before coupon applies., type: string}
      maximum_amount: {description: Maximum order amount allowed when using the coupon.,
        type: string}
      email_restrictions:
        description: List of email addresses that can use this coupon.
        type: array
        items: {type: string}
      used_by:
        description: List of user IDs (or guest email addresses) that have used the
          coupon.
        type: array
        items: {type: integer, format: int32}
      meta_data:
        description: Meta data.
        type: array
        items: {$ref: '#/definitions/MetaDatum'}
  customer_download:
    title: customer_download
    type: array
    items:
      type: object
      properties:
        download_id: {description: Download ID., type: string}
        download_url: {description: Download file URL., type: string}
        product_id: {description: Downloadable product ID., type: integer, format: int32}
        product_name: {description: Product name., type: string}
        download_name: {description: Downloadable file name., type: string}
        order_id: {description: Order ID., type: integer, format: int32}
        order_key: {description: Order key., type: string}
        downloads_remaining: {description: Number of downloads remaining., type: string}
        access_expires: {description: 'The date when download access expires, in the
            site''s timezone.', type: string}
        access_expires_gmt: {description: 'The date when download access expires,
            as GMT.', type: string}
        file: {$ref: '#/definitions/File'}
  customer:
    title: customer
    type: object
    properties:
      id: {description: Unique identifier for the resource., type: integer, format: int32}
      date_created: {description: 'The date the customer was created, in the site''s
          timezone.', type: string}
      date_created_gmt: {description: 'The date the customer was created, as GMT.',
        type: string}
      date_modified: {description: 'The date the customer was last modified, in the
          site''s timezone.', type: string}
      date_modified_gmt: {description: 'The date the customer was last modified, as
          GMT.', type: string}
      email: {description: The email address for the customer., type: string}
      first_name: {description: Customer first name., type: string}
      last_name: {description: Customer last name., type: string}
      role: {description: Customer role., type: string}
      username: {description: Customer login name., type: string}
      password: {description: Customer password., type: string}
      billing: {$ref: '#/definitions/Billing'}
      shipping: {$ref: '#/definitions/Shipping'}
      is_paying_customer: {description: 'Is the customer a paying customer?', type: boolean}
      avatar_url: {description: Avatar URL., type: string}
      meta_data:
        description: Meta data.
        type: array
        items: {$ref: '#/definitions/MetaDatum'}
  order_note:
    title: order_note
    type: object
    properties:
      id: {description: Unique identifier for the resource., type: integer, format: int32}
      author: {description: Order note author., type: string}
      date_created: {description: 'The date the order note was created, in the site''s
          timezone.', type: string}
      date_created_gmt: {description: 'The date the order note was created, as GMT.',
        type: string}
      note: {description: Order note content., type: string}
      customer_note: {description: 'If true, the note will be shown to customers and
          they will be notified. If false, the note will be for admin reference only.',
        type: boolean}
      added_by_user: {description: 'If true, this note will be attributed to the current
          user. If false, the note will be attributed to the system.', type: boolean}
  shop_order_refund:
    title: shop_order_refund
    type: object
    properties:
      id: {description: Unique identifier for the resource., type: integer, format: int32}
      date_created: {description: 'The date the order refund was created, in the site''s
          timezone.', type: string}
      date_created_gmt: {description: 'The date the order refund was created, as GMT.',
        type: string}
      amount: {description: Refund amount., type: string}
      reason: {description: Reason for refund., type: string}
      refunded_by: {description: User ID of user who created the refund., type: integer,
        format: int32}
      refunded_payment: {description: If the payment was refunded via the API., type: boolean}
      meta_data:
        description: Meta data.
        type: array
        items: {$ref: '#/definitions/MetaDatum'}
      line_items:
        description: Line items data.
        type: array
        items: {$ref: '#/definitions/LineItem'}
      api_refund: {description: 'When true, the payment gateway API is used to generate
          the refund.', type: boolean}
      api_restock: {description: 'When true, refunded items are restocked.', type: boolean}
  shop_order:
    title: shop_order
    type: object
    properties:
      id: {description: Unique identifier for the resource., type: integer, format: int32}
      parent_id: {description: Parent order ID., type: integer, format: int32}
      number: {description: Order number., type: string}
      order_key: {description: Order key., type: string}
      created_via: {description: Shows where the order was created., type: string}
      version: {description: Version of WooCommerce which last updated the order.,
        type: integer, format: int32}
      status: {$ref: '#/definitions/Status'}
      currency: {$ref: '#/definitions/Currency'}
      date_created: {description: 'The date the order was created, in the site''s
          timezone.', type: string}
      date_created_gmt: {description: 'The date the order was created, as GMT.', type: string}
      date_modified: {description: 'The date the order was last modified, in the site''s
          timezone.', type: string}
      date_modified_gmt: {description: 'The date the order was last modified, as GMT.',
        type: string}
      discount_total: {description: Total discount amount for the order., type: string}
      discount_tax: {description: Total discount tax amount for the order., type: string}
      shipping_total: {description: Total shipping amount for the order., type: string}
      shipping_tax: {description: Total shipping tax amount for the order., type: string}
      cart_tax: {description: Sum of line item taxes only., type: string}
      total: {description: Grand total., type: string}
      total_tax: {description: Sum of all taxes., type: string}
      prices_include_tax: {description: True the prices included tax during checkout.,
        type: boolean}
      customer_id: {description: User ID who owns the order. 0 for guests., type: integer,
        format: int32}
      customer_ip_address: {description: Customer's IP address., type: string}
      customer_user_agent: {description: User agent of the customer., type: string}
      customer_note: {description: Note left by customer during checkout., type: string}
      billing: {$ref: '#/definitions/Billing1'}
      shipping: {$ref: '#/definitions/Shipping1'}
      payment_method: {description: Payment method ID., type: string}
      payment_method_title: {description: Payment method title., type: string}
      transaction_id: {description: Unique transaction ID., type: string}
      date_paid: {description: 'The date the order was paid, in the site''s timezone.',
        type: string}
      date_paid_gmt: {description: 'The date the order was paid, as GMT.', type: string}
      date_completed: {description: 'The date the order was completed, in the site''s
          timezone.', type: string}
      date_completed_gmt: {description: 'The date the order was completed, as GMT.',
        type: string}
      cart_hash: {description: MD5 hash of cart items to ensure orders are not modified.,
        type: string}
      meta_data:
        description: Meta data.
        type: array
        items: {$ref: '#/definitions/MetaDatum'}
      line_items:
        description: Line items data.
        type: array
        items: {$ref: '#/definitions/LineItem1'}
      tax_lines:
        description: Tax lines data.
        type: array
        items: {$ref: '#/definitions/TaxLine'}
      shipping_lines:
        description: Shipping lines data.
        type: array
        items: {$ref: '#/definitions/ShippingLine'}
      fee_lines:
        description: Fee lines data.
        type: array
        items: {$ref: '#/definitions/FeeLine'}
      coupon_lines:
        description: Coupons line data.
        type: array
        items: {$ref: '#/definitions/CouponLine'}
      refunds:
        description: List of refunds.
        type: array
        items: {$ref: '#/definitions/Refund'}
      set_paid: {description: Define if the order is paid. It will set the status
          to processing and reduce stock items., type: boolean}
  product_attribute_term:
    title: product_attribute_term
    type: object
    properties:
      id: {description: Unique identifier for the resource., type: integer, format: int32}
      name: {description: Term name., type: string}
      slug: {description: An alphanumeric identifier for the resource unique to its
          type., type: string}
      description: {description: HTML description of the resource., type: string}
      menu_order: {description: 'Menu order, used to custom sort the resource.', type: integer,
        format: int32}
      count: {description: Number of published products for the resource., type: integer,
        format: int32}
  product_attribute:
    title: product_attribute
    type: object
    properties:
      id: {description: Unique identifier for the resource., type: integer, format: int32}
      name: {description: Attribute name., type: string}
      slug: {description: An alphanumeric identifier for the resource unique to its
          type., type: string}
      type: {$ref: '#/definitions/Type'}
      order_by: {$ref: '#/definitions/OrderBy'}
      has_archives: {description: Enable/Disable attribute archives., type: boolean}
  product_cat:
    title: product_cat
    type: object
    properties:
      id: {description: Unique identifier for the resource., type: integer, format: int32}
      name: {description: Category name., type: string}
      slug: {description: An alphanumeric identifier for the resource unique to its
          type., type: string}
      parent: {description: The ID for the parent of the resource., type: integer,
        format: int32}
      description: {description: HTML description of the resource., type: string}
      display: {$ref: '#/definitions/Display'}
      image: {$ref: '#/definitions/Image'}
      menu_order: {description: 'Menu order, used to custom sort the resource.', type: integer,
        format: int32}
      count: {description: Number of published products for the resource., type: integer,
        format: int32}
  product_review:
    title: product_review
    type: object
    properties:
      id: {description: Unique identifier for the resource., type: integer, format: int32}
      date_created: {description: 'The date the review was created, in the site''s
          timezone.', type: string}
      date_created_gmt: {description: 'The date the review was created, as GMT.',
        type: string}
      product_id: {description: Unique identifier for the product that the review
          belongs to., type: integer, format: int32}
      status: {$ref: '#/definitions/Status1'}
      reviewer: {description: Reviewer name., type: string}
      reviewer_email: {description: Reviewer email., type: string}
      review: {description: The content of the review., type: string}
      rating: {description: Review rating (0 to 5)., type: integer, format: int32}
      verified: {description: Shows if the reviewer bought the product or not., type: boolean}
      reviewer_avatar_urls:
        description: Avatar URLs for the object reviewer.
        type: object
        additionalProperties: {type: string}
  product_shipping_class:
    title: product_shipping_class
    type: object
    properties:
      id: {description: Unique identifier for the resource., type: integer, format: int32}
      name: {description: Shipping class name., type: string}
      slug: {description: An alphanumeric identifier for the resource unique to its
          type., type: string}
      description: {description: HTML description of the resource., type: string}
      count: {description: Number of published products for the resource., type: integer,
        format: int32}
  product_tag:
    title: product_tag
    type: object
    properties:
      id: {description: Unique identifier for the resource., type: integer, format: int32}
      name: {description: Tag name., type: string}
      slug: {description: An alphanumeric identifier for the resource unique to its
          type., type: string}
      description: {description: HTML description of the resource., type: string}
      count: {description: Number of published products for the resource., type: integer,
        format: int32}
  product:
    title: product
    type: object
    properties:
      id: {description: Unique identifier for the resource., type: integer, format: int32}
      name: {description: Product name., type: string}
      slug: {description: Product slug., type: string}
      permalink: {description: Product URL., type: string}
      date_created: {description: 'The date the product was created, in the site''s
          timezone.', type: string}
      date_created_gmt: {description: 'The date the product was created, as GMT.',
        type: string}
      date_modified: {description: 'The date the product was last modified, in the
          site''s timezone.', type: string}
      date_modified_gmt: {description: 'The date the product was last modified, as
          GMT.', type: string}
      type: {$ref: '#/definitions/Type1'}
      status: {$ref: '#/definitions/Status2'}
      featured: {description: Featured product., type: boolean}
      catalog_visibility: {$ref: '#/definitions/CatalogVisibility'}
      description: {description: Product description., type: string}
      short_description: {description: Product short description., type: string}
      sku: {description: Unique identifier., type: string}
      price: {description: Current product price., type: string}
      regular_price: {description: Product regular price., type: string}
      sale_price: {description: Product sale price., type: string}
      date_on_sale_from: {description: 'Start date of sale price, in the site''s timezone.',
        type: string}
      date_on_sale_from_gmt: {description: 'Start date of sale price, as GMT.', type: string}
      date_on_sale_to: {description: 'End date of sale price, in the site''s timezone.',
        type: string}
      date_on_sale_to_gmt: {description: 'End date of sale price, in the site''s timezone.',
        type: string}
      price_html: {description: Price formatted in HTML., type: string}
      on_sale: {description: Shows if the product is on sale., type: boolean}
      purchasable: {description: Shows if the product can be bought., type: boolean}
      total_sales: {description: Amount of sales., type: integer, format: int32}
      virtual: {description: If the product is virtual., type: boolean}
      downloadable: {description: If the product is downloadable., type: boolean}
      downloads:
        description: List of downloadable files.
        type: array
        items: {$ref: '#/definitions/Download'}
      download_limit: {description: Number of times downloadable files can be downloaded
          after purchase., type: integer, format: int32}
      download_expiry: {description: Number of days until access to downloadable files
          expires., type: integer, format: int32}
      external_url: {description: Product external URL. Only for external products.,
        type: string}
      button_text: {description: Product external button text. Only for external products.,
        type: string}
      tax_status: {$ref: '#/definitions/TaxStatus1'}
      tax_class: {description: Tax class., type: string}
      manage_stock: {description: Stock management at product level., type: boolean}
      stock_quantity: {description: Stock quantity., type: integer, format: int32}
      stock_status: {$ref: '#/definitions/StockStatus'}
      backorders: {$ref: '#/definitions/Backorders'}
      backorders_allowed: {description: Shows if backorders are allowed., type: boolean}
      backordered: {description: Shows if the product is on backordered., type: boolean}
      low_stock_amount: {description: Low Stock amount for the product., type: integer,
        format: int32}
      sold_individually: {description: Allow one item to be bought in a single order.,
        type: boolean}
      weight: {description: Product weight (kg)., type: string}
      dimensions: {$ref: '#/definitions/Dimensions'}
      shipping_required: {description: Shows if the product need to be shipped., type: boolean}
      shipping_taxable: {description: Shows whether or not the product shipping is
          taxable., type: boolean}
      shipping_class: {description: Shipping class slug., type: string}
      shipping_class_id: {description: Shipping class ID., type: string}
      reviews_allowed: {description: Allow reviews., type: boolean}
      average_rating: {description: Reviews average rating., type: string}
      rating_count: {description: Amount of reviews that the product have., type: integer,
        format: int32}
      related_ids:
        description: List of related products IDs.
        type: array
        items: {type: integer, format: int32}
      upsell_ids:
        description: List of up-sell products IDs.
        type: array
        items: {type: integer, format: int32}
      cross_sell_ids:
        description: List of cross-sell products IDs.
        type: array
        items: {type: integer, format: int32}
      parent_id: {description: Product parent ID., type: integer, format: int32}
      purchase_note: {description: Optional note to send the customer after purchase.,
        type: string}
      categories:
        description: List of categories.
        type: array
        items: {$ref: '#/definitions/Category'}
      tags:
        description: List of tags.
        type: array
        items: {$ref: '#/definitions/Tag'}
      images:
        description: List of images.
        type: array
        items: {$ref: '#/definitions/Image1'}
      attributes:
        description: List of attributes.
        type: array
        items: {$ref: '#/definitions/Attribute'}
      default_attributes:
        description: Defaults variation attributes.
        type: array
        items: {$ref: '#/definitions/DefaultAttribute'}
      variations:
        description: List of variations IDs.
        type: array
        items: {type: integer, format: int32}
      grouped_products:
        description: List of grouped products ID.
        type: array
        items: {type: integer, format: int32}
      menu_order: {description: 'Menu order, used to custom sort products.', type: integer,
        format: int32}
      meta_data:
        description: Meta data.
        type: array
        items: {$ref: '#/definitions/MetaDatum'}
  product_variation:
    title: product_variation
    type: object
    properties:
      id: {description: Unique identifier for the resource., type: integer, format: int32}
      date_created: {description: 'The date the variation was created, in the site''s
          timezone.', type: string}
      date_modified: {description: 'The date the variation was last modified, in the
          site''s timezone.', type: string}
      description: {description: Variation description., type: string}
      permalink: {description: Variation URL., type: string}
      sku: {description: Unique identifier., type: string}
      price: {description: Current variation price., type: string}
      regular_price: {description: Variation regular price., type: string}
      sale_price: {description: Variation sale price., type: string}
      date_on_sale_from: {description: 'Start date of sale price, in the site''s timezone.',
        type: string}
      date_on_sale_from_gmt: {description: 'Start date of sale price, as GMT.', type: string}
      date_on_sale_to: {description: 'End date of sale price, in the site''s timezone.',
        type: string}
      date_on_sale_to_gmt: {description: 'End date of sale price, in the site''s timezone.',
        type: string}
      on_sale: {description: Shows if the variation is on sale., type: boolean}
      status: {$ref: '#/definitions/Status3'}
      purchasable: {description: Shows if the variation can be bought., type: boolean}
      virtual: {description: If the variation is virtual., type: boolean}
      downloadable: {description: If the variation is downloadable., type: boolean}
      downloads:
        description: List of downloadable files.
        type: array
        items: {$ref: '#/definitions/Download'}
      download_limit: {description: Number of times downloadable files can be downloaded
          after purchase., type: integer, format: int32}
      download_expiry: {description: Number of days until access to downloadable files
          expires., type: integer, format: int32}
      tax_status: {$ref: '#/definitions/TaxStatus1'}
      tax_class: {description: Tax class., type: string}
      manage_stock: {description: Stock management at variation level., type: boolean}
      stock_quantity: {description: Stock quantity., type: integer, format: int32}
      stock_status: {$ref: '#/definitions/StockStatus'}
      backorders: {$ref: '#/definitions/Backorders'}
      backorders_allowed: {description: Shows if backorders are allowed., type: boolean}
      backordered: {description: Shows if the variation is on backordered., type: boolean}
      low_stock_amount: {description: Low Stock amount for the variation., type: integer,
        format: int32}
      weight: {description: Variation weight (kg)., type: string}
      dimensions: {$ref: '#/definitions/Dimensions1'}
      shipping_class: {description: Shipping class slug., type: string}
      shipping_class_id: {description: Shipping class ID., type: string}
      image: {$ref: '#/definitions/Image2'}
      attributes:
        description: List of attributes.
        type: array
        items: {$ref: '#/definitions/Attribute1'}
      menu_order: {description: 'Menu order, used to custom sort products.', type: integer,
        format: int32}
      meta_data:
        description: Meta data.
        type: array
        items: {$ref: '#/definitions/MetaDatum'}
  sales_report:
    title: sales_report
    type: object
    properties:
      total_sales: {description: Gross sales in the period., type: string}
      net_sales: {description: Net sales in the period., type: string}
      average_sales: {description: Average net daily sales., type: string}
      total_orders: {description: Total of orders placed., type: integer, format: int32}
      total_items: {description: Total of items purchased., type: integer, format: int32}
      total_tax: {description: Total charged for taxes., type: string}
      total_shipping: {description: Total charged for shipping., type: string}
      total_refunds: {description: Total of refunded orders., type: integer, format: int32}
      total_discount: {description: Total of coupons used., type: integer, format: int32}
      totals_grouped_by: {description: Group type., type: string}
      totals:
        description: Totals.
        type: array
        items: {type: integer, format: int32}
  top_sellers_report:
    title: top_sellers_report
    type: object
    properties:
      name: {description: Product name., type: string}
      product_id: {description: Product ID., type: integer, format: int32}
      quantity: {description: Total number of purchases., type: integer, format: int32}
  report_order_total:
    title: report_order_total
    type: object
    properties:
      slug: {description: An alphanumeric identifier for the resource., type: string}
      name: {description: Order status name., type: string}
      total: {description: Amount of orders., type: string}
  report_product_total:
    title: report_product_total
    type: object
    properties:
      slug: {description: An alphanumeric identifier for the resource., type: string}
      name: {description: Product type name., type: string}
      total: {description: Amount of products., type: string}
  report_customer_total:
    title: report_customer_total
    type: object
    properties:
      slug: {description: An alphanumeric identifier for the resource., type: string}
      name: {description: Customer type name., type: string}
      total: {description: Amount of customers., type: string}
  report_coupon_total:
    title: report_coupon_total
    type: object
    properties:
      slug: {description: An alphanumeric identifier for the resource., type: string}
      name: {description: Coupon type name., type: string}
      total: {description: Amount of coupons., type: string}
  report_review_total:
    title: report_review_total
    type: object
    properties:
      slug: {description: An alphanumeric identifier for the resource., type: string}
      name: {description: Review type name., type: string}
      total: {description: Amount of reviews., type: string}
  report:
    title: report
    type: object
    properties:
      slug: {description: An alphanumeric identifier for the resource., type: string}
      description: {description: A human-readable description of the resource., type: string}
  setting_group:
    title: setting_group
    type: object
    properties:
      id: {description: A unique identifier that can be used to link settings together.,
        type: string}
      label: {description: A human readable label for the setting used in interfaces.,
        type: string}
      description: {description: A human readable description for the setting used
          in interfaces., type: string}
      parent_id: {description: ID of parent grouping., type: string}
      sub_groups: {description: IDs for settings sub groups., type: string}
  setting:
    title: setting
    type: object
    properties:
      id: {description: A unique identifier for the setting., type: string}
      group_id: {description: An identifier for the group this setting belongs to.,
        type: string}
      label: {description: A human readable label for the setting used in interfaces.,
        type: string}
      description: {description: A human readable description for the setting used
          in interfaces., type: string}
      value: {description: Setting value., type: string}
      default: {description: Default value for the setting., type: string}
      tip: {description: Additional help text shown to the user about the setting.,
        type: string}
      placeholder: {description: Placeholder text to be displayed in text inputs.,
        type: string}
      type: {$ref: '#/definitions/Type2'}
      options: {description: 'Array of options (key value pairs) for inputs such as
          select, multiselect, and radio buttons.', type: object}
  shipping_zone:
    title: shipping_zone
    type: object
    properties:
      id: {description: Unique identifier for the resource., type: integer, format: int32}
      name: {description: Shipping zone name., type: string}
      order: {description: Shipping zone order., type: integer, format: int32}
  shipping_zone_location:
    title: shipping_zone_location
    type: object
    properties:
      code: {description: Shipping zone location code., type: string}
      type: {$ref: '#/definitions/Type3'}
  shipping_zone_method:
    title: shipping_zone_method
    type: object
    properties:
      id: {description: Shipping method instance ID., type: integer, format: int32}
      instance_id: {description: Shipping method instance ID., type: integer, format: int32}
      title: {description: Shipping method customer facing title., type: string}
      order: {description: Shipping method sort order., type: integer, format: int32}
      enabled: {description: Shipping method enabled status., type: boolean}
      method_id: {description: Shipping method ID., type: string}
      method_title: {description: Shipping method title., type: string}
      method_description: {description: Shipping method description., type: string}
      settings: {$ref: '#/definitions/Settings'}
  tax_class:
    title: tax_class
    type: object
    properties:
      slug: {description: Unique identifier for the resource., type: string}
      name: {description: Tax class name., type: string}
    required: [name]
  tax:
    title: tax
    type: object
    properties:
      id: {description: Unique identifier for the resource., type: integer, format: int32}
      country: {description: Country ISO 3166 code., type: string}
      state: {description: State code., type: string}
      postcode: {description: 'Postcode/ZIP, it doesn''t support multiple values.
          Deprecated as of WooCommerce 5.3, ''postcodes'' should be used instead.',
        type: string}
      city: {description: 'City name, it doesn''t support multiple values. Deprecated
          as of WooCommerce 5.3, ''cities'' should be used instead.', type: string}
      rate: {description: Tax rate., type: string}
      name: {description: Tax rate name., type: string}
      priority: {description: Tax priority., type: integer, format: int32}
      compound: {description: Whether or not this is a compound rate., type: boolean}
      shipping: {description: Whether or not this tax rate also gets applied to shipping.,
        type: boolean}
      order: {description: Indicates the order that will appear in queries., type: integer,
        format: int32}
      class: {$ref: '#/definitions/Class'}
      postcodes:
        description: List of postcodes / ZIPs. Introduced in WooCommerce 5.3.
        type: array
        items: {type: string}
      cities:
        description: List of city names. Introduced in WooCommerce 5.3.
        type: array
        items: {type: string}
  webhook:
    title: webhook
    type: object
    properties:
      id: {description: Unique identifier for the resource., type: integer, format: int32}
      name: {description: A friendly name for the webhook., type: string}
      status: {$ref: '#/definitions/Status4'}
      topic: {description: Webhook topic., type: string}
      resource: {description: Webhook resource., type: string}
      event: {description: Webhook event., type: string}
      hooks:
        description: WooCommerce action names associated with the webhook.
        type: array
        items: {type: string}
      delivery_url: {description: The URL where the webhook payload is delivered.,
        type: string}
      secret: {description: Secret key used to generate a hash of the delivered webhook
          and provided in the request headers. This will default to a MD5 hash from
          the current user's ID|username if not provided., type: string}
      date_created: {description: 'The date the webhook was created, in the site''s
          timezone.', type: string}
      date_created_gmt: {description: 'The date the webhook was created, as GMT.',
        type: string}
      date_modified: {description: 'The date the webhook was last modified, in the
          site''s timezone.', type: string}
      date_modified_gmt: {description: 'The date the webhook was last modified, as
          GMT.', type: string}
  system_status:
    title: system_status
    type: object
    properties:
      environment: {$ref: '#/definitions/Environment'}
      database: {$ref: '#/definitions/Database'}
      active_plugins:
        description: Active plugins.
        type: array
        items: {type: string}
      inactive_plugins:
        description: Inactive plugins.
        type: array
        items: {type: string}
      dropins_mu_plugins:
        description: Dropins & MU plugins.
        type: array
        items: {type: string}
      theme: {$ref: '#/definitions/Theme'}
      settings: {$ref: '#/definitions/Settings1'}
      security: {$ref: '#/definitions/Security'}
      pages:
        description: WooCommerce pages.
        type: array
        items: {type: string}
      post_type_counts:
        description: Total post count.
        type: array
        items: {type: string}
  system_status_tool:
    title: system_status_tool
    type: object
    properties:
      id: {description: A unique identifier for the tool., type: string}
      name: {description: Tool name., type: string}
      action: {description: What running the tool will do., type: string}
      description: {description: Tool description., type: string}
      success: {description: 'Did the tool run successfully?', type: boolean}
      message: {description: Tool return message., type: string}
  shipping_method:
    title: shipping_method
    type: object
    properties:
      id: {description: Method ID., type: string}
      title: {description: Shipping method title., type: string}
      description: {description: Shipping method description., type: string}
  payment_gateway:
    title: payment_gateway
    type: object
    properties:
      id: {description: Payment gateway ID., type: string}
      title: {description: Payment gateway title on checkout., type: string}
      description: {description: Payment gateway description on checkout., type: string}
      order: {description: Payment gateway sort order., type: integer, format: int32}
      enabled: {description: Payment gateway enabled status., type: boolean}
      method_title: {description: Payment gateway method title., type: string}
      method_description: {description: Payment gateway method description., type: string}
      method_supports:
        description: Supported features for this payment gateway.
        type: array
        items: {type: string}
      settings: {$ref: '#/definitions/Settings2'}
  data_index:
    title: data_index
    type: object
    properties:
      slug: {description: Data resource ID., type: string}
      description: {description: Data resource description., type: string}
  data_continents:
    title: data_continents
    type: object
    properties:
      code: {description: 2 character continent code., type: string}
      name: {description: Full name of continent., type: string}
      countries:
        description: List of countries on this continent.
        type: array
        items: {$ref: '#/definitions/Country'}
  data_countries:
    title: data_countries
    type: object
    properties:
      code: {description: ISO3166 alpha-2 country code., type: string}
      name: {description: Full name of country., type: string}
      states:
        description: List of states in this country.
        type: array
        items: {$ref: '#/definitions/State'}
  data_currencies:
    title: data_currencies
    type: object
    properties:
      code: {description: ISO4217 currency code., type: string}
      name: {description: Full name of currency., type: string}
      symbol: {description: Currency symbol., type: string}
  Attribute:
    title: Attribute
    type: object
    properties:
      id: {description: Attribute ID., type: integer, format: int32}
      name: {description: Attribute name., type: string}
      position: {description: Attribute position., type: integer, format: int32}
      visible: {description: Define if the attribute is visible on the "Additional
          information" tab in the product's page., type: boolean}
      variation: {description: Define if the attribute can be used as variation.,
        type: boolean}
      options:
        description: List of available term names of the attribute.
        type: array
        items: {type: string}
  Attribute1:
    title: Attribute1
    type: object
    properties:
      id: {description: Attribute ID., type: integer, format: int32}
      name: {description: Attribute name., type: string}
      option: {description: Selected attribute term name., type: string}
  Backorders:
    title: Backorders
    description: If managing stock, this controls if backorders are allowed.
    example: 'no'
    type: string
    enum: ['no', notify, 'yes']
  Billing:
    title: Billing
    description: List of billing address data.
    type: object
    properties:
      first_name: {description: First name., type: string}
      last_name: {description: Last name., type: string}
      company: {description: Company name., type: string}
      address_1: {description: Address line 1, type: string}
      address_2: {description: Address line 2, type: string}
      city: {description: City name., type: string}
      state: {description: 'ISO code or name of the state, province or district.',
        type: string}
      postcode: {description: Postal code., type: string}
      country: {description: ISO code of the country., type: string}
      email: {description: Email address., type: string}
      phone: {description: Phone number., type: string}
  Billing1:
    title: Billing1
    description: Billing address.
    type: object
    properties:
      first_name: {description: First name., type: string}
      last_name: {description: Last name., type: string}
      company: {description: Company name., type: string}
      address_1: {description: Address line 1, type: string}
      address_2: {description: Address line 2, type: string}
      city: {description: City name., type: string}
      state: {description: 'ISO code or name of the state, province or district.',
        type: string}
      postcode: {description: Postal code., type: string}
      country: {description: Country code in ISO 3166-1 alpha-2 format., type: string}
      email: {description: Email address., type: string}
      phone: {description: Phone number., type: string}
  CatalogVisibility:
    title: CatalogVisibility
    description: Catalog visibility.
    example: visible
    type: string
    enum: [visible, catalog, search, hidden]
  Category:
    title: Category
    type: object
    properties:
      id: {description: Category ID., type: integer, format: int32}
      name: {description: Category name., type: string}
      slug: {description: Category slug., type: string}
  Class:
    title: Class
    description: Tax class.
    example: standard
    type: string
    enum: [standard, reduced-rate, zero-rate]
  class1:
    title: class1
    description: Sort by tax class.
    example: standard
    type: string
    enum: [standard, reduced-rate, zero-rate]
  context:
    title: context
    description: Scope under which the request is made; determines fields present
      in response.
    example: view
    type: string
    enum: [view, edit]
  context2:
    title: context2
    description: Scope under which the request is made; determines fields present
      in response.
    example: view
    type: string
    enum: [view]
  Country:
    title: Country
    type: object
    properties:
      code: {description: ISO3166 alpha-2 country code., type: string}
      currency_code: {description: Default ISO4127 alpha-3 currency code for the country.,
        type: string}
      currency_pos: {description: Currency symbol position for this country., type: string}
      decimal_sep: {description: Decimal separator for displayed prices for this country.,
        type: string}
      dimension_unit: {description: The unit lengths are defined in for this country.,
        type: string}
      name: {description: Full name of country., type: string}
      num_decimals: {description: Number of decimal points shown in displayed prices
          for this country., type: integer, format: int32}
      states:
        description: List of states in this country.
        type: array
        items: {$ref: '#/definitions/State'}
      thousand_sep: {description: Thousands separator for displayed prices in this
          country., type: string}
      weight_unit: {description: The unit weights are defined in for this country.,
        type: string}
  CouponLine:
    title: CouponLine
    type: object
    properties:
      id: {description: Item ID., type: integer, format: int32}
      code: {description: Coupon code., type: string}
      discount: {description: Discount total., type: string}
      discount_tax: {description: Discount total tax., type: string}
      meta_data:
        description: Meta data.
        type: array
        items: {$ref: '#/definitions/MetaDatum'}
  Currency:
    title: Currency
    description: Currency the order was created with, in ISO format.
    example: AED
    type: string
    enum: [AED, AFN, ALL, AMD, ANG, AOA, ARS, AUD, AWG, AZN, BAM, BBD, BDT, BGN, BHD,
      BIF, BMD, BND, BOB, BRL, BSD, BTC, BTN, BWP, BYR, BYN, BZD, CAD, CDF, CHF, CLP,
      CNY, COP, CRC, CUC, CUP, CVE, CZK, DJF, DKK, DOP, DZD, EGP, ERN, ETB, EUR, FJD,
      FKP, GBP, GEL, GGP, GHS, GIP, GMD, GNF, GTQ, GYD, HKD, HNL, HRK, HTG, HUF, IDR,
      ILS, IMP, INR, IQD, IRR, IRT, ISK, JEP, JMD, JOD, JPY, KES, KGS, KHR, KMF, KPW,
      KRW, KWD, KYD, KZT, LAK, LBP, LKR, LRD, LSL, LYD, MAD, MDL, MGA, MKD, MMK, MNT,
      MOP, MRU, MUR, MVR, MWK, MXN, MYR, MZN, NAD, NGN, NIO, NOK, NPR, NZD, OMR, PAB,
      PEN, PGK, PHP, PKR, PLN, PRB, PYG, QAR, RON, RSD, RUB, RWF, SAR, SBD, SCR, SDG,
      SEK, SGD, SHP, SLL, SOS, SRD, SSP, STN, SYP, SZL, THB, TJS, TMT, TND, TOP, TRY,
      TTD, TWD, TZS, UAH, UGX, USD, UYU, UZS, VEF, VES, VND, VUV, WST, XAF, XCD, XOF,
      XPF, YER, ZAR, ZMW]
  customer1:
    title: customer1
    type: object
    properties:
      email: {description: New user email address., type: string}
      first_name: {description: Customer first name., type: string}
      last_name: {description: Customer last name., type: string}
      username: {description: New user username., type: string}
      password: {description: New user password., type: string}
      billing: {$ref: '#/definitions/Billing'}
      shipping: {$ref: '#/definitions/Shipping'}
      meta_data:
        description: Meta data.
        type: array
        items: {$ref: '#/definitions/MetaDatum'}
  customer2:
    title: customer2
    type: object
    properties:
      email: {description: The email address for the customer., type: string}
      first_name: {description: Customer first name., type: string}
      last_name: {description: Customer last name., type: string}
      username: {description: Customer login name., type: string}
      password: {description: Customer password., type: string}
      billing: {$ref: '#/definitions/Billing'}
      shipping: {$ref: '#/definitions/Shipping'}
      meta_data:
        description: Meta data.
        type: array
        items: {$ref: '#/definitions/MetaDatum'}
  Database:
    title: Database
    description: Database.
    type: object
    properties:
      wc_database_version: {description: WC database version., type: string}
      database_prefix: {description: Database prefix., type: string}
      maxmind_geoip_database: {description: MaxMind GeoIP database., type: string}
      database_tables:
        description: Database tables.
        type: array
        items: {type: string}
  DefaultAttribute:
    title: DefaultAttribute
    type: object
    properties:
      id: {description: Attribute ID., type: integer, format: int32}
      name: {description: Attribute name., type: string}
      option: {description: Selected attribute term name., type: string}
  Dimensions:
    title: Dimensions
    description: Product dimensions.
    type: object
    properties:
      length: {description: Product length (cm)., type: string}
      width: {description: Product width (cm)., type: string}
      height: {description: Product height (cm)., type: string}
  Dimensions1:
    title: Dimensions1
    description: Variation dimensions.
    type: object
    properties:
      length: {description: Variation length (cm)., type: string}
      width: {description: Variation width (cm)., type: string}
      height: {description: Variation height (cm)., type: string}
  DiscountType:
    title: DiscountType
    description: Determines the type of discount that will be applied.
    example: percent
    type: string
    enum: [percent, fixed_cart, fixed_product]
  Display:
    title: Display
    description: Category archive display type.
    example: default
    type: string
    enum: [default, products, subcategories, both]
  Download:
    title: Download
    type: object
    properties:
      id: {description: File ID., type: string}
      name: {description: File name., type: string}
      file: {description: File URL., type: string}
  Environment:
    title: Environment
    description: Environment.
    type: object
    properties:
      home_url: {description: Home URL., type: string}
      site_url: {description: Site URL., type: string}
      version: {description: WooCommerce version., type: string}
      log_directory: {description: Log directory., type: string}
      log_directory_writable: {description: 'Is log directory writable?', type: boolean}
      wp_version: {description: WordPress version., type: string}
      wp_multisite: {description: 'Is WordPress multisite?', type: boolean}
      wp_memory_limit: {description: WordPress memory limit., type: integer, format: int32}
      wp_debug_mode: {description: 'Is WordPress debug mode active?', type: boolean}
      wp_cron: {description: 'Are WordPress cron jobs enabled?', type: boolean}
      language: {description: WordPress language., type: string}
      server_info: {description: Server info., type: string}
      php_version: {description: PHP version., type: string}
      php_post_max_size: {description: PHP post max size., type: integer, format: int32}
      php_max_execution_time: {description: PHP max execution time., type: integer,
        format: int32}
      php_max_input_vars: {description: PHP max input vars., type: integer, format: int32}
      curl_version: {description: cURL version., type: string}
      suhosin_installed: {description: 'Is SUHOSIN installed?', type: boolean}
      max_upload_size: {description: Max upload size., type: integer, format: int32}
      mysql_version: {description: MySQL version., type: string}
      mysql_version_string: {description: MySQL version string., type: string}
      default_timezone: {description: Default timezone., type: string}
      fsockopen_or_curl_enabled: {description: 'Is fsockopen/cURL enabled?', type: boolean}
      soapclient_enabled: {description: 'Is SoapClient class enabled?', type: boolean}
      domdocument_enabled: {description: 'Is DomDocument class enabled?', type: boolean}
      gzip_enabled: {description: 'Is GZip enabled?', type: boolean}
      mbstring_enabled: {description: 'Is mbstring enabled?', type: boolean}
      remote_post_successful: {description: 'Remote POST successful?', type: boolean}
      remote_post_response: {description: Remote POST response., type: string}
      remote_get_successful: {description: 'Remote GET successful?', type: boolean}
      remote_get_response: {description: Remote GET response., type: string}
  FeeLine:
    title: FeeLine
    type: object
    properties:
      id: {description: Item ID., type: integer, format: int32}
      name: {description: Fee name., type: string}
      tax_class: {description: Tax class of fee., type: string}
      tax_status: {$ref: '#/definitions/TaxStatus'}
      total: {description: Line total (after discounts)., type: string}
      total_tax: {description: Line total tax (after discounts)., type: string}
      taxes:
        description: Line taxes.
        type: array
        items: {$ref: '#/definitions/Taxis1'}
      meta_data:
        description: Meta data.
        type: array
        items: {$ref: '#/definitions/MetaDatum'}
  File:
    title: File
    description: File details.
    type: object
    properties:
      name: {description: File name., type: string}
      file: {description: File URL., type: string}
  Image:
    title: Image
    description: Image data.
    type: object
    properties:
      id: {description: Image ID., type: integer, format: int32}
      date_created: {description: 'The date the image was created, in the site''s
          timezone.', type: string}
      date_created_gmt: {description: 'The date the image was created, as GMT.', type: string}
      date_modified: {description: 'The date the image was last modified, in the site''s
          timezone.', type: string}
      date_modified_gmt: {description: 'The date the image was last modified, as GMT.',
        type: string}
      src: {description: Image URL., type: string}
      name: {description: Image name., type: string}
      alt: {description: Image alternative text., type: string}
  Image1:
    title: Image1
    type: object
    properties:
      id: {description: Image ID., type: integer, format: int32}
      date_created: {description: 'The date the image was created, in the site''s
          timezone.', type: string}
      date_created_gmt: {description: 'The date the image was created, as GMT.', type: string}
      date_modified: {description: 'The date the image was last modified, in the site''s
          timezone.', type: string}
      date_modified_gmt: {description: 'The date the image was last modified, as GMT.',
        type: string}
      src: {description: Image URL., type: string}
      name: {description: Image name., type: string}
      alt: {description: Image alternative text., type: string}
  Image2:
    title: Image2
    description: Variation image data.
    type: object
    properties:
      id: {description: Image ID., type: integer, format: int32}
      date_created: {description: 'The date the image was created, in the site''s
          timezone.', type: string}
      date_created_gmt: {description: 'The date the image was created, as GMT.', type: string}
      date_modified: {description: 'The date the image was last modified, in the site''s
          timezone.', type: string}
      date_modified_gmt: {description: 'The date the image was last modified, as GMT.',
        type: string}
      src: {description: Image URL., type: string}
      name: {description: Image name., type: string}
      alt: {description: Image alternative text., type: string}
  LineItem:
    title: LineItem
    type: object
    properties:
      id: {description: Item ID., type: integer, format: int32}
      name: {description: Product name., type: string}
      product_id: {description: Product ID., type: string}
      variation_id: {description: 'Variation ID, if applicable.', type: integer, format: int32}
      quantity: {description: Quantity ordered., type: integer, format: int32}
      tax_class: {description: Tax class of product., type: string}
      subtotal: {description: Line subtotal (before discounts)., type: string}
      subtotal_tax: {description: Line subtotal tax (before discounts)., type: string}
      total: {description: Line total (after discounts)., type: string}
      total_tax: {description: Line total tax (after discounts)., type: string}
      taxes:
        description: Line taxes.
        type: array
        items: {$ref: '#/definitions/Taxis'}
      meta_data:
        description: Meta data.
        type: array
        items: {$ref: '#/definitions/MetaDatum'}
      sku: {description: Product SKU., type: string}
      price: {description: Product price., type: number, format: double}
      refund_total: {description: Amount that will be refunded for this line item
          (excluding taxes)., type: number, format: double}
  LineItem1:
    title: LineItem1
    type: object
    properties:
      id: {description: Item ID., type: integer, format: int32}
      name: {description: Product name., type: string}
      parent_name: {description: Parent product name if the product is a variation.,
        type: string}
      product_id: {description: Product ID., type: string}
      variation_id: {description: 'Variation ID, if applicable.', type: integer, format: int32}
      quantity: {description: Quantity ordered., type: integer, format: int32}
      tax_class: {description: Tax class of product., type: string}
      subtotal: {description: Line subtotal (before discounts)., type: string}
      subtotal_tax: {description: Line subtotal tax (before discounts)., type: string}
      total: {description: Line total (after discounts)., type: string}
      total_tax: {description: Line total tax (after discounts)., type: string}
      taxes:
        description: Line taxes.
        type: array
        items: {$ref: '#/definitions/Taxis1'}
      meta_data:
        description: Meta data.
        type: array
        items: {$ref: '#/definitions/MetaDatum5'}
      sku: {description: Product SKU., type: string}
      price: {description: Product price., type: number, format: double}
  MetaDatum:
    title: MetaDatum
    type: object
    properties:
      id: {description: Meta ID., type: integer, format: int32}
      key: {description: Meta key., type: string}
      value: {description: Meta value., type: string}
  MetaDatum5:
    title: MetaDatum5
    type: object
    properties:
      id: {description: Meta ID., type: integer, format: int32}
      key: {description: Meta key., type: string}
      value: {description: Meta value., type: string}
      display_key: {description: Meta key for UI display., type: string}
      display_value: {description: Meta value for UI display., type: string}
  order:
    title: order
    description: Order sort attribute ascending or descending.
    example: asc
    type: string
    enum: [asc, desc]
  order_note1:
    title: order_note1
    type: object
    properties:
      note: {description: Order note content., type: string}
      customer_note: {description: 'If true, the note will be shown to customers and
          they will be notified. If false, the note will be for admin reference only.',
        type: boolean}
      added_by_user: {description: 'If true, this note will be attributed to the current
          user. If false, the note will be attributed to the system.', type: boolean}
  OrderBy:
    title: OrderBy
    description: Default sort order.
    example: menu_order
    type: string
    enum: [menu_order, name, name_num, id]
  orderby1:
    title: orderby1
    description: Sort collection by object attribute.
    example: date
    type: string
    enum: [date, id, include, title, slug, modified]
  orderby2:
    title: orderby2
    description: Sort collection by object attribute.
    example: id
    type: string
    enum: [id, include, name, registered_date]
  orderby5:
    title: orderby5
    description: Sort collection by resource attribute.
    example: id
    type: string
    enum: [id, include, name, slug, term_group, description, count]
  orderby11:
    title: orderby11
    description: Sort collection by object attribute.
    example: date
    type: string
    enum: [date, date_gmt, id, include, product]
  orderby14:
    title: orderby14
    description: Sort collection by object attribute.
    example: date
    type: string
    enum: [date, id, include, title, slug, modified, menu_order, price, popularity,
      rating]
  orderby15:
    title: orderby15
    description: Sort collection by object attribute.
    example: date
    type: string
    enum: [date, id, include, title, slug, modified, menu_order]
  orderby16:
    title: orderby16
    description: Sort collection by object attribute.
    example: id
    type: string
    enum: [id, order, priority]
  orderby17:
    title: orderby17
    description: Sort collection by object attribute.
    example: date
    type: string
    enum: [date, id, title]
  payment_gateway1:
    title: payment_gateway1
    type: object
    properties:
      title: {description: Payment gateway title on checkout., type: string}
      description: {description: Payment gateway description on checkout., type: string}
      order: {description: Payment gateway sort order., type: integer, format: int32}
      enabled: {description: Payment gateway enabled status., type: boolean}
      settings: {$ref: '#/definitions/Settings2'}
  period:
    title: period
    description: Report period.
    example: week
    type: string
    enum: [week, month, last_month, year]
  product_attribute_term1:
    title: product_attribute_term1
    type: object
    properties:
      name: {description: Name for the resource., type: string}
      slug: {description: An alphanumeric identifier for the resource unique to its
          type., type: string}
      description: {description: HTML description of the resource., type: string}
      menu_order: {description: 'Menu order, used to custom sort the resource.', type: integer,
        format: int32}
  product_attribute_term2:
    title: product_attribute_term2
    type: object
    properties:
      name: {description: Term name., type: string}
      slug: {description: An alphanumeric identifier for the resource unique to its
          type., type: string}
      description: {description: HTML description of the resource., type: string}
      menu_order: {description: 'Menu order, used to custom sort the resource.', type: integer,
        format: int32}
  product_attribute1:
    title: product_attribute1
    type: object
    properties:
      name: {description: Name for the resource., type: string}
      slug: {description: An alphanumeric identifier for the resource unique to its
          type., type: string}
      type: {$ref: '#/definitions/Type'}
      order_by: {$ref: '#/definitions/OrderBy'}
      has_archives: {description: Enable/Disable attribute archives., type: boolean}
  product_attribute2:
    title: product_attribute2
    type: object
    properties:
      name: {description: Attribute name., type: string}
      slug: {description: An alphanumeric identifier for the resource unique to its
          type., type: string}
      type: {$ref: '#/definitions/Type'}
      order_by: {$ref: '#/definitions/OrderBy'}
      has_archives: {description: Enable/Disable attribute archives., type: boolean}
  product_cat1:
    title: product_cat1
    type: object
    properties:
      name: {description: Name for the resource., type: string}
      slug: {description: An alphanumeric identifier for the resource unique to its
          type., type: string}
      parent: {description: The ID for the parent of the resource., type: integer,
        format: int32}
      description: {description: HTML description of the resource., type: string}
      display: {$ref: '#/definitions/Display'}
      image: {$ref: '#/definitions/Image'}
      menu_order: {description: 'Menu order, used to custom sort the resource.', type: integer,
        format: int32}
  product_cat2:
    title: product_cat2
    type: object
    properties:
      name: {description: Category name., type: string}
      slug: {description: An alphanumeric identifier for the resource unique to its
          type., type: string}
      parent: {description: The ID for the parent of the resource., type: integer,
        format: int32}
      description: {description: HTML description of the resource., type: string}
      display: {$ref: '#/definitions/Display'}
      image: {$ref: '#/definitions/Image'}
      menu_order: {description: 'Menu order, used to custom sort the resource.', type: integer,
        format: int32}
  product_review1:
    title: product_review1
    type: object
    properties:
      product_id: {description: Unique identifier for the product., type: integer,
        format: int32}
      status: {$ref: '#/definitions/Status1'}
      reviewer: {description: Name of the reviewer., type: string}
      reviewer_email: {description: Email of the reviewer., type: string}
      review: {description: Review content., type: string}
      rating: {description: Review rating (0 to 5)., type: integer, format: int32}
  product_review2:
    title: product_review2
    type: object
    properties:
      product_id: {description: Unique identifier for the product that the review
          belongs to., type: integer, format: int32}
      status: {$ref: '#/definitions/Status1'}
      reviewer: {description: Reviewer name., type: string}
      reviewer_email: {description: Reviewer email., type: string}
      review: {description: The content of the review., type: string}
      rating: {description: Review rating (0 to 5)., type: integer, format: int32}
  product_shipping_class1:
    title: product_shipping_class1
    type: object
    properties:
      name: {description: Name for the resource., type: string}
      slug: {description: An alphanumeric identifier for the resource unique to its
          type., type: string}
      description: {description: HTML description of the resource., type: string}
  product_shipping_class2:
    title: product_shipping_class2
    type: object
    properties:
      name: {description: Shipping class name., type: string}
      slug: {description: An alphanumeric identifier for the resource unique to its
          type., type: string}
      description: {description: HTML description of the resource., type: string}
  product_tag1:
    title: product_tag1
    type: object
    properties:
      name: {description: Name for the resource., type: string}
      slug: {description: An alphanumeric identifier for the resource unique to its
          type., type: string}
      description: {description: HTML description of the resource., type: string}
  product_tag2:
    title: product_tag2
    type: object
    properties:
      name: {description: Tag name., type: string}
      slug: {description: An alphanumeric identifier for the resource unique to its
          type., type: string}
      description: {description: HTML description of the resource., type: string}
  product_variation1:
    title: product_variation1
    type: object
    properties:
      description: {description: Variation description., type: string}
      sku: {description: Unique identifier., type: string}
      regular_price: {description: Variation regular price., type: string}
      sale_price: {description: Variation sale price., type: string}
      date_on_sale_from: {description: 'Start date of sale price, in the site''s timezone.',
        type: string}
      date_on_sale_from_gmt: {description: 'Start date of sale price, as GMT.', type: string}
      date_on_sale_to: {description: 'End date of sale price, in the site''s timezone.',
        type: string}
      date_on_sale_to_gmt: {description: 'End date of sale price, in the site''s timezone.',
        type: string}
      status: {$ref: '#/definitions/Status3'}
      virtual: {description: If the variation is virtual., type: boolean}
      downloadable: {description: If the variation is downloadable., type: boolean}
      downloads:
        description: List of downloadable files.
        type: array
        items: {$ref: '#/definitions/Download'}
      download_limit: {description: Number of times downloadable files can be downloaded
          after purchase., type: integer, format: int32}
      download_expiry: {description: Number of days until access to downloadable files
          expires., type: integer, format: int32}
      tax_status: {$ref: '#/definitions/TaxStatus1'}
      tax_class: {description: Tax class., type: string}
      manage_stock: {description: Stock management at variation level., type: boolean}
      stock_quantity: {description: Stock quantity., type: integer, format: int32}
      stock_status: {$ref: '#/definitions/StockStatus'}
      backorders: {$ref: '#/definitions/Backorders'}
      low_stock_amount: {description: Low Stock amount for the variation., type: integer,
        format: int32}
      weight: {description: Variation weight (kg)., type: string}
      dimensions: {$ref: '#/definitions/Dimensions1'}
      shipping_class: {description: Shipping class slug., type: string}
      image: {$ref: '#/definitions/Image2'}
      attributes:
        description: List of attributes.
        type: array
        items: {$ref: '#/definitions/Attribute1'}
      menu_order: {description: 'Menu order, used to custom sort products.', type: integer,
        format: int32}
      meta_data:
        description: Meta data.
        type: array
        items: {$ref: '#/definitions/MetaDatum'}
  product1:
    title: product1
    type: object
    properties:
      name: {description: Product name., type: string}
      slug: {description: Product slug., type: string}
      date_created: {description: 'The date the product was created, in the site''s
          timezone.', type: string}
      date_created_gmt: {description: 'The date the product was created, as GMT.',
        type: string}
      type: {$ref: '#/definitions/Type1'}
      status: {$ref: '#/definitions/Status2'}
      featured: {description: Featured product., type: boolean}
      catalog_visibility: {$ref: '#/definitions/CatalogVisibility'}
      description: {description: Product description., type: string}
      short_description: {description: Product short description., type: string}
      sku: {description: Unique identifier., type: string}
      regular_price: {description: Product regular price., type: string}
      sale_price: {description: Product sale price., type: string}
      date_on_sale_from: {description: 'Start date of sale price, in the site''s timezone.',
        type: string}
      date_on_sale_from_gmt: {description: 'Start date of sale price, as GMT.', type: string}
      date_on_sale_to: {description: 'End date of sale price, in the site''s timezone.',
        type: string}
      date_on_sale_to_gmt: {description: 'End date of sale price, in the site''s timezone.',
        type: string}
      virtual: {description: If the product is virtual., type: boolean}
      downloadable: {description: If the product is downloadable., type: boolean}
      downloads:
        description: List of downloadable files.
        type: array
        items: {$ref: '#/definitions/Download'}
      download_limit: {description: Number of times downloadable files can be downloaded
          after purchase., type: integer, format: int32}
      download_expiry: {description: Number of days until access to downloadable files
          expires., type: integer, format: int32}
      external_url: {description: Product external URL. Only for external products.,
        type: string}
      button_text: {description: Product external button text. Only for external products.,
        type: string}
      tax_status: {$ref: '#/definitions/TaxStatus1'}
      tax_class: {description: Tax class., type: string}
      manage_stock: {description: Stock management at product level., type: boolean}
      stock_quantity: {description: Stock quantity., type: integer, format: int32}
      stock_status: {$ref: '#/definitions/StockStatus'}
      backorders: {$ref: '#/definitions/Backorders'}
      low_stock_amount: {description: Low Stock amount for the product., type: integer,
        format: int32}
      sold_individually: {description: Allow one item to be bought in a single order.,
        type: boolean}
      weight: {description: Product weight (kg)., type: string}
      dimensions: {$ref: '#/definitions/Dimensions'}
      shipping_class: {description: Shipping class slug., type: string}
      reviews_allowed: {description: Allow reviews., type: boolean}
      upsell_ids:
        description: List of up-sell products IDs.
        type: array
        items: {type: integer, format: int32}
      cross_sell_ids:
        description: List of cross-sell products IDs.
        type: array
        items: {type: integer, format: int32}
      parent_id: {description: Product parent ID., type: integer, format: int32}
      purchase_note: {description: Optional note to send the customer after purchase.,
        type: string}
      categories:
        description: List of categories.
        type: array
        items: {$ref: '#/definitions/Category'}
      tags:
        description: List of tags.
        type: array
        items: {$ref: '#/definitions/Tag'}
      images:
        description: List of images.
        type: array
        items: {$ref: '#/definitions/Image1'}
      attributes:
        description: List of attributes.
        type: array
        items: {$ref: '#/definitions/Attribute'}
      default_attributes:
        description: Defaults variation attributes.
        type: array
        items: {$ref: '#/definitions/DefaultAttribute'}
      menu_order: {description: 'Menu order, used to custom sort products.', type: integer,
        format: int32}
      meta_data:
        description: Meta data.
        type: array
        items: {$ref: '#/definitions/MetaDatum'}
  Refund:
    title: Refund
    type: object
    properties:
      id: {description: Refund ID., type: integer, format: int32}
      reason: {description: Refund reason., type: string}
      total: {description: Refund total., type: string}
  role:
    title: role
    description: Limit result set to resources with a specific role.
    example: all
    type: string
    enum: [all, administrator, editor, author, contributor, subscriber, customer,
      shop_manager]
  Security:
    title: Security
    description: Security.
    type: object
    properties:
      secure_connection: {description: 'Is the connection to your store secure?',
        type: boolean}
      hide_errors: {description: 'Hide errors from visitors?', type: boolean}
  Settings:
    title: Settings
    description: Shipping method settings.
    type: object
    properties:
      id: {description: A unique identifier for the setting., type: string}
      label: {description: A human readable label for the setting used in interfaces.,
        type: string}
      description: {description: A human readable description for the setting used
          in interfaces., type: string}
      type: {$ref: '#/definitions/Type4'}
      value: {description: Setting value., type: string}
      default: {description: Default value for the setting., type: string}
      tip: {description: Additional help text shown to the user about the setting.,
        type: string}
      placeholder: {description: Placeholder text to be displayed in text inputs.,
        type: string}
  Settings1:
    title: Settings1
    description: Settings.
    type: object
    properties:
      api_enabled: {description: 'REST API enabled?', type: boolean}
      force_ssl: {description: 'SSL forced?', type: boolean}
      currency: {description: Currency., type: string}
      currency_symbol: {description: Currency symbol., type: string}
      currency_position: {description: Currency position., type: string}
      thousand_separator: {description: Thousand separator., type: string}
      decimal_separator: {description: Decimal separator., type: string}
      number_of_decimals: {description: Number of decimals., type: integer, format: int32}
      geolocation_enabled: {description: 'Geolocation enabled?', type: boolean}
      taxonomies:
        description: Taxonomy terms for product/order statuses.
        type: array
        items: {type: string}
      product_visibility_terms:
        description: Terms in the product visibility taxonomy.
        type: array
        items: {type: string}
  Settings2:
    title: Settings2
    description: Payment gateway settings.
    type: object
    properties:
      id: {description: A unique identifier for the setting., type: string}
      label: {description: A human readable label for the setting used in interfaces.,
        type: string}
      description: {description: A human readable description for the setting used
          in interfaces., type: string}
      type: {$ref: '#/definitions/Type2'}
      value: {description: Setting value., type: string}
      default: {description: Default value for the setting., type: string}
      tip: {description: Additional help text shown to the user about the setting.,
        type: string}
      placeholder: {description: Placeholder text to be displayed in text inputs.,
        type: string}
  Shipping:
    title: Shipping
    description: List of shipping address data.
    type: object
    properties:
      first_name: {description: First name., type: string}
      last_name: {description: Last name., type: string}
      company: {description: Company name., type: string}
      address_1: {description: Address line 1, type: string}
      address_2: {description: Address line 2, type: string}
      city: {description: City name., type: string}
      state: {description: 'ISO code or name of the state, province or district.',
        type: string}
      postcode: {description: Postal code., type: string}
      country: {description: ISO code of the country., type: string}
      phone: {description: Phone number., type: string}
  shipping_zone_method1:
    title: shipping_zone_method1
    type: object
    properties:
      order: {description: Shipping method sort order., type: integer, format: int32}
      enabled: {description: Shipping method enabled status., type: boolean}
      settings: {$ref: '#/definitions/Settings'}
      method_id: {description: Shipping method ID., type: string}
  shipping_zone_method2:
    title: shipping_zone_method2
    type: object
    properties:
      order: {description: Shipping method sort order., type: integer, format: int32}
      enabled: {description: Shipping method enabled status., type: boolean}
      settings: {$ref: '#/definitions/Settings'}
  shipping_zone1:
    title: shipping_zone1
    type: object
    properties:
      name: {description: Shipping zone name., type: string}
      order: {description: Shipping zone order., type: integer, format: int32}
  Shipping1:
    title: Shipping1
    description: Shipping address.
    type: object
    properties:
      first_name: {description: First name., type: string}
      last_name: {description: Last name., type: string}
      company: {description: Company name., type: string}
      address_1: {description: Address line 1, type: string}
      address_2: {description: Address line 2, type: string}
      city: {description: City name., type: string}
      state: {description: 'ISO code or name of the state, province or district.',
        type: string}
      postcode: {description: Postal code., type: string}
      country: {description: Country code in ISO 3166-1 alpha-2 format., type: string}
  ShippingLine:
    title: ShippingLine
    type: object
    properties:
      id: {description: Item ID., type: integer, format: int32}
      method_title: {description: Shipping method name., type: string}
      method_id: {description: Shipping method ID., type: string}
      instance_id: {description: Shipping instance ID., type: string}
      total: {description: Line total (after discounts)., type: string}
      total_tax: {description: Line total tax (after discounts)., type: string}
      taxes:
        description: Line taxes.
        type: array
        items: {$ref: '#/definitions/Taxis2'}
      meta_data:
        description: Meta data.
        type: array
        items: {$ref: '#/definitions/MetaDatum'}
  shop_coupon1:
    title: shop_coupon1
    type: object
    properties:
      code: {description: Coupon code., type: string}
      amount: {description: 'The amount of discount. Should always be numeric, even
          if setting a percentage.', type: string}
      discount_type: {$ref: '#/definitions/DiscountType'}
      description: {description: Coupon description., type: string}
      date_expires: {description: 'The date the coupon expires, in the site''s timezone.',
        type: string}
      date_expires_gmt: {description: 'The date the coupon expires, as GMT.', type: string}
      individual_use: {description: 'If true, the coupon can only be used individually.
          Other applied coupons will be removed from the cart.', type: boolean}
      product_ids:
        description: List of product IDs the coupon can be used on.
        type: array
        items: {type: integer, format: int32}
      excluded_product_ids:
        description: List of product IDs the coupon cannot be used on.
        type: array
        items: {type: integer, format: int32}
      usage_limit: {description: How many times the coupon can be used in total.,
        type: integer, format: int32}
      usage_limit_per_user: {description: How many times the coupon can be used per
          customer., type: integer, format: int32}
      limit_usage_to_x_items: {description: Max number of items in the cart the coupon
          can be applied to., type: integer, format: int32}
      free_shipping: {description: 'If true and if the free shipping method requires
          a coupon, this coupon will enable free shipping.', type: boolean}
      product_categories:
        description: List of category IDs the coupon applies to.
        type: array
        items: {type: integer, format: int32}
      excluded_product_categories:
        description: List of category IDs the coupon does not apply to.
        type: array
        items: {type: integer, format: int32}
      exclude_sale_items: {description: 'If true, this coupon will not be applied
          to items that have sale prices.', type: boolean}
      minimum_amount: {description: Minimum order amount that needs to be in the cart
          before coupon applies., type: string}
      maximum_amount: {description: Maximum order amount allowed when using the coupon.,
        type: string}
      email_restrictions:
        description: List of email addresses that can use this coupon.
        type: array
        items: {type: string}
      meta_data:
        description: Meta data.
        type: array
        items: {$ref: '#/definitions/MetaDatum'}
  shop_order_refund1:
    title: shop_order_refund1
    type: object
    properties:
      amount: {description: Refund amount., type: string}
      reason: {description: Reason for refund., type: string}
      refunded_by: {description: User ID of user who created the refund., type: integer,
        format: int32}
      meta_data:
        description: Meta data.
        type: array
        items: {$ref: '#/definitions/MetaDatum'}
      api_refund: {description: 'When true, the payment gateway API is used to generate
          the refund.', type: boolean}
      api_restock: {description: 'When true, refunded items are restocked.', type: boolean}
  shop_order1:
    title: shop_order1
    type: object
    properties:
      parent_id: {description: Parent order ID., type: integer, format: int32}
      status: {$ref: '#/definitions/Status'}
      currency: {$ref: '#/definitions/Currency'}
      customer_id: {description: User ID who owns the order. 0 for guests., type: integer,
        format: int32}
      customer_note: {description: Note left by customer during checkout., type: string}
      billing: {$ref: '#/definitions/Billing1'}
      shipping: {$ref: '#/definitions/Shipping1'}
      payment_method: {description: Payment method ID., type: string}
      payment_method_title: {description: Payment method title., type: string}
      transaction_id: {description: Unique transaction ID., type: string}
      meta_data:
        description: Meta data.
        type: array
        items: {$ref: '#/definitions/MetaDatum'}
      line_items:
        description: Line items data.
        type: array
        items: {$ref: '#/definitions/LineItem1'}
      shipping_lines:
        description: Shipping lines data.
        type: array
        items: {$ref: '#/definitions/ShippingLine'}
      fee_lines:
        description: Fee lines data.
        type: array
        items: {$ref: '#/definitions/FeeLine'}
      coupon_lines:
        description: Coupons line data.
        type: array
        items: {$ref: '#/definitions/CouponLine'}
      set_paid: {description: Define if the order is paid. It will set the status
          to processing and reduce stock items., type: boolean}
  State:
    title: State
    type: object
    properties:
      code: {description: State code., type: string}
      name: {description: Full name of state., type: string}
  Status:
    title: Status
    description: Order status.
    example: pending
    type: string
    enum: [pending, processing, on-hold, completed, cancelled, refunded, failed]
  Status1:
    title: Status1
    description: Status of the review.
    example: approved
    type: string
    enum: [approved, hold, spam, unspam, trash, untrash]
  Status2:
    title: Status2
    description: Product status (post status).
    example: draft
    type: string
    enum: [draft, pending, private, publish, future]
  Status3:
    title: Status3
    description: Variation status.
    example: draft
    type: string
    enum: [draft, pending, private, publish]
  Status4:
    title: Status4
    description: Webhook status.
    example: active
    type: string
    enum: [active, paused, disabled]
  status5:
    title: status5
    example: any
    type: string
    enum: [any, trash, pending, processing, on-hold, completed, cancelled, refunded,
      failed]
  status10:
    title: status10
    description: Limit result set to reviews assigned a specific status.
    example: all
    type: string
    enum: [all, hold, approved, spam, trash]
  status15:
    title: status15
    description: Limit result set to products assigned a specific status.
    example: any
    type: string
    enum: [any, future, trash, draft, pending, private, publish]
  status25:
    title: status25
    description: Limit result set to webhooks assigned a specific status.
    example: all
    type: string
    enum: [all, active, paused, disabled]
  stock_status2:
    title: stock_status2
    description: Limit result set to products with specified stock status.
    example: instock
    type: string
    enum: [instock, outofstock, onbackorder]
  StockStatus:
    title: StockStatus
    description: Controls the stock status of the product.
    example: instock
    type: string
    enum: [instock, outofstock, onbackorder]
  system_status_tool1:
    title: system_status_tool1
    type: object
    properties:
      name: {description: Tool name., type: string}
      action: {description: What running the tool will do., type: string}
      description: {description: Tool description., type: string}
      success: {description: 'Did the tool run successfully?', type: boolean}
      message: {description: Tool return message., type: string}
  Tag:
    title: Tag
    type: object
    properties:
      id: {description: Tag ID., type: integer, format: int32}
      name: {description: Tag name., type: string}
      slug: {description: Tag slug., type: string}
  tax_class1:
    title: tax_class1
    type: object
    properties:
      name: {description: Tax class name., type: string}
  tax1:
    title: tax1
    type: object
    properties:
      country: {description: Country ISO 3166 code., type: string}
      state: {description: State code., type: string}
      postcode: {description: 'Postcode/ZIP, it doesn''t support multiple values.
          Deprecated as of WooCommerce 5.3, ''postcodes'' should be used instead.',
        type: string}
      city: {description: 'City name, it doesn''t support multiple values. Deprecated
          as of WooCommerce 5.3, ''cities'' should be used instead.', type: string}
      rate: {description: Tax rate., type: string}
      name: {description: Tax rate name., type: string}
      priority: {description: Tax priority., type: integer, format: int32}
      compound: {description: Whether or not this is a compound rate., type: boolean}
      shipping: {description: Whether or not this tax rate also gets applied to shipping.,
        type: boolean}
      order: {description: Indicates the order that will appear in queries., type: integer,
        format: int32}
      class: {$ref: '#/definitions/Class'}
      postcodes:
        description: List of postcodes / ZIPs. Introduced in WooCommerce 5.3.
        type: array
        items: {type: string}
      cities:
        description: List of city names. Introduced in WooCommerce 5.3.
        type: array
        items: {type: string}
  Taxis:
    title: Taxis
    type: object
    properties:
      id: {description: Tax rate ID., type: integer, format: int32}
      total: {description: Tax total., type: string}
      subtotal: {description: Tax subtotal., type: string}
      refund_total: {description: Amount that will be refunded for this tax., type: number,
        format: double}
  Taxis1:
    title: Taxis1
    type: object
    properties:
      id: {description: Tax rate ID., type: integer, format: int32}
      total: {description: Tax total., type: string}
      subtotal: {description: Tax subtotal., type: string}
  Taxis2:
    title: Taxis2
    type: object
    properties:
      id: {description: Tax rate ID., type: integer, format: int32}
      total: {description: Tax total., type: string}
  TaxLine:
    title: TaxLine
    type: object
    properties:
      id: {description: Item ID., type: integer, format: int32}
      rate_code: {description: Tax rate code., type: string}
      rate_id: {description: Tax rate ID., type: string}
      label: {description: Tax rate label., type: string}
      compound: {description: Show if is a compound tax rate., type: boolean}
      tax_total: {description: Tax total (not including shipping taxes)., type: string}
      shipping_tax_total: {description: Shipping tax total., type: string}
      meta_data:
        description: Meta data.
        type: array
        items: {$ref: '#/definitions/MetaDatum'}
  TaxStatus:
    title: TaxStatus
    description: Tax status of fee.
    example: taxable
    type: string
    enum: [taxable, none]
  TaxStatus1:
    title: TaxStatus1
    description: Tax status.
    example: taxable
    type: string
    enum: [taxable, shipping, none]
  Theme:
    title: Theme
    description: Theme.
    type: object
    properties:
      name: {description: Theme name., type: string}
      version: {description: Theme version., type: string}
      version_latest: {description: Latest version of theme., type: string}
      author_url: {description: Theme author URL., type: string}
      is_child_theme: {description: 'Is this theme a child theme?', type: boolean}
      has_woocommerce_support: {description: 'Does the theme declare WooCommerce support?',
        type: boolean}
      has_woocommerce_file: {description: 'Does the theme have a woocommerce.php file?',
        type: boolean}
      has_outdated_templates: {description: 'Does this theme have outdated templates?',
        type: boolean}
      overrides:
        description: Template overrides.
        type: array
        items: {type: string}
      parent_name: {description: Parent theme name., type: string}
      parent_version: {description: Parent theme version., type: string}
      parent_author_url: {description: Parent theme author URL., type: string}
  Type:
    title: Type
    description: Type of attribute.
    example: select
    type: string
    enum: [select]
  Type1:
    title: Type1
    description: Product type.
    example: simple
    type: string
    enum: [simple, grouped, external, variable]
  Type2:
    title: Type2
    description: Type of setting.
    example: text
    type: string
    enum: [text, email, number, color, password, textarea, select, multiselect, radio,
      image_width, checkbox]
  Type3:
    title: Type3
    description: Shipping zone location type.
    example: postcode
    type: string
    enum: [postcode, state, country, continent]
  Type4:
    title: Type4
    description: Type of setting.
    example: text
    type: string
    enum: [text, email, number, color, password, textarea, select, multiselect, radio,
      image_width, checkbox, class, order]
  type6:
    title: type6
    description: Limit result to customers or internal notes.
    example: any
    type: string
    enum: [any, customer, internal]
  type11:
    title: type11
    description: Limit result set to products assigned a specific type.
    example: simple
    type: string
    enum: [simple, grouped, external, variable]
  webhook1:
    title: webhook1
    type: object
    properties:
      name: {description: A friendly name for the webhook., type: string}
      status: {$ref: '#/definitions/Status4'}
      topic: {description: Webhook topic., type: string}
      secret: {description: Secret key used to generate a hash of the delivered webhook
          and provided in the request headers. This will default to a MD5 hash from
          the current user's ID|username if not provided., type: string}
      delivery_url: {description: Webhook delivery URL., type: string}
  webhook2:
    title: webhook2
    type: object
    properties:
      name: {description: A friendly name for the webhook., type: string}
      status: {$ref: '#/definitions/Status4'}
      topic: {description: Webhook topic., type: string}
      secret: {description: Secret key used to generate a hash of the delivered webhook
          and provided in the request headers. This will default to a MD5 hash from
          the current user's ID|username if not provided., type: string}
parameters: {}
responses: {}
securityDefinitions:
  basic_auth: {type: basic}
security:
- basic_auth: []
tags: []
x-ms-connector-metadata:
- {propertyName: Website, propertyValue: 'https://woocommerce.com/'}
- {propertyName: Privacy policy, propertyValue: 'https://automattic.com/privacy/'}
- {propertyName: Categories, propertyValue: Commerce;Website}
